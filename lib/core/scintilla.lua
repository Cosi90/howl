--[[-
LuaJIT-based Scintilla interface.

This is a raw Scintilla interface without much in the way of documentation.

The auto-generated code is generated by sci_gen.lua, in the src/tools directory.

@author Nils Nordman <nino at nordman.org>
@copyright 2012
@license MIT (see LICENSE)
]]

local _G = _G
local setmetatable = setmetatable
local ffi = require('ffi')

local sci = {}
local _ENV = sci
if setfenv then setfenv(1, _ENV) end

ffi.cdef[[
typedef struct {
    long start_pos;
    long end_pos;
} char_range;

typedef struct {
    char_range range;
    char *text;
} text_range;

typedef struct {
    char_range range;
    char *text;
    char_range found_range;
} find_text;
]]

local cbuf = ffi.typeof('char[?]')
local char_range = ffi.typeof('char_range')
local text_range = ffi.typeof('text_range')
local find_text = ffi.typeof('find_text')

function sci.new(send_function)
  return setmetatable({
      send = send_function
    }, { __index = sci })
end

function sci:send_with_stringresult(message, arg1)
  length = self.send(message, arg1, nil)
  buffer = cbuf(length + 1)
  self.send(message, arg1, buffer)
  return ffi.string(buffer, length)
end

function sci:send_with_textrange(message, start_pos, end_pos)
  length = end_pos - start_pos
  -- in case of style bytes we actually need two bytes per pos so double up
  buffer = cbuf((length * 2) + 2)
  tr = text_range({ char_range(start_pos, end_pos), buffer })
  real_length = self.send(message, nil, ffi.cast('text_range *', tr))
  -- but always return a string of the right length
  return ffi.string(buffer, real_length)
end

function sci:send_with_findtext(message, start_pos, end_pos, text)
  cstring = cbuf(#text, text)
  found_range = char_range()
  ft = find_text({ char_range({start_pos, end_pos}), cstring, found_range })
  found_at = self.send(message, nil, ffi.cast('find_text *', ft))
  if found_at >= 0 then return found_at, found_at + #text end
end

-- !! Begin auto generated content

INVALID_POSITION = -1
SCI_START = 2000
SCI_OPTIONAL_START = 3000
SCI_LEXER_START = 4000
SCWS_INVISIBLE = 0
SCWS_VISIBLEALWAYS = 1
SCWS_VISIBLEAFTERINDENT = 2
SC_EOL_CRLF = 0
SC_EOL_CR = 1
SC_EOL_LF = 2
SC_CP_UTF8 = 65001
MARKER_MAX = 31
SC_MARK_CIRCLE = 0
SC_MARK_ROUNDRECT = 1
SC_MARK_ARROW = 2
SC_MARK_SMALLRECT = 3
SC_MARK_SHORTARROW = 4
SC_MARK_EMPTY = 5
SC_MARK_ARROWDOWN = 6
SC_MARK_MINUS = 7
SC_MARK_PLUS = 8
SC_MARK_VLINE = 9
SC_MARK_LCORNER = 10
SC_MARK_TCORNER = 11
SC_MARK_BOXPLUS = 12
SC_MARK_BOXPLUSCONNECTED = 13
SC_MARK_BOXMINUS = 14
SC_MARK_BOXMINUSCONNECTED = 15
SC_MARK_LCORNERCURVE = 16
SC_MARK_TCORNERCURVE = 17
SC_MARK_CIRCLEPLUS = 18
SC_MARK_CIRCLEPLUSCONNECTED = 19
SC_MARK_CIRCLEMINUS = 20
SC_MARK_CIRCLEMINUSCONNECTED = 21
SC_MARK_BACKGROUND = 22
SC_MARK_DOTDOTDOT = 23
SC_MARK_ARROWS = 24
SC_MARK_PIXMAP = 25
SC_MARK_FULLRECT = 26
SC_MARK_LEFTRECT = 27
SC_MARK_AVAILABLE = 28
SC_MARK_UNDERLINE = 29
SC_MARK_RGBAIMAGE = 30
SC_MARK_CHARACTER = 10000
SC_MARKNUM_FOLDEREND = 25
SC_MARKNUM_FOLDEROPENMID = 26
SC_MARKNUM_FOLDERMIDTAIL = 27
SC_MARKNUM_FOLDERTAIL = 28
SC_MARKNUM_FOLDERSUB = 29
SC_MARKNUM_FOLDER = 30
SC_MARKNUM_FOLDEROPEN = 31
SC_MASK_FOLDERS = 0xFE000000
SC_MARGIN_SYMBOL = 0
SC_MARGIN_NUMBER = 1
SC_MARGIN_BACK = 2
SC_MARGIN_FORE = 3
SC_MARGIN_TEXT = 4
SC_MARGIN_RTEXT = 5
STYLE_DEFAULT = 32
STYLE_LINENUMBER = 33
STYLE_BRACELIGHT = 34
STYLE_BRACEBAD = 35
STYLE_CONTROLCHAR = 36
STYLE_INDENTGUIDE = 37
STYLE_CALLTIP = 38
STYLE_LASTPREDEFINED = 39
STYLE_MAX = 255
SC_CHARSET_ANSI = 0
SC_CHARSET_DEFAULT = 1
SC_CHARSET_BALTIC = 186
SC_CHARSET_CHINESEBIG5 = 136
SC_CHARSET_EASTEUROPE = 238
SC_CHARSET_GB2312 = 134
SC_CHARSET_GREEK = 161
SC_CHARSET_HANGUL = 129
SC_CHARSET_MAC = 77
SC_CHARSET_OEM = 255
SC_CHARSET_RUSSIAN = 204
SC_CHARSET_CYRILLIC = 1251
SC_CHARSET_SHIFTJIS = 128
SC_CHARSET_SYMBOL = 2
SC_CHARSET_TURKISH = 162
SC_CHARSET_JOHAB = 130
SC_CHARSET_HEBREW = 177
SC_CHARSET_ARABIC = 178
SC_CHARSET_VIETNAMESE = 163
SC_CHARSET_THAI = 222
SC_CHARSET_8859_15 = 1000
SC_CASE_MIXED = 0
SC_CASE_UPPER = 1
SC_CASE_LOWER = 2
SC_FONT_SIZE_MULTIPLIER = 100
SC_WEIGHT_NORMAL = 400
SC_WEIGHT_SEMIBOLD = 600
SC_WEIGHT_BOLD = 700
INDIC_PLAIN = 0
INDIC_SQUIGGLE = 1
INDIC_TT = 2
INDIC_DIAGONAL = 3
INDIC_STRIKE = 4
INDIC_HIDDEN = 5
INDIC_BOX = 6
INDIC_ROUNDBOX = 7
INDIC_STRAIGHTBOX = 8
INDIC_DASH = 9
INDIC_DOTS = 10
INDIC_SQUIGGLELOW = 11
INDIC_DOTBOX = 12
INDIC_MAX = 31
INDIC_CONTAINER = 8
INDIC0_MASK = 0x20
INDIC1_MASK = 0x40
INDIC2_MASK = 0x80
INDICS_MASK = 0xE0
SC_IV_NONE = 0
SC_IV_REAL = 1
SC_IV_LOOKFORWARD = 2
SC_IV_LOOKBOTH = 3
SC_PRINT_NORMAL = 0
SC_PRINT_INVERTLIGHT = 1
SC_PRINT_BLACKONWHITE = 2
SC_PRINT_COLOURONWHITE = 3
SC_PRINT_COLOURONWHITEDEFAULTBG = 4
SCFIND_WHOLEWORD = 2
SCFIND_MATCHCASE = 4
SCFIND_WORDSTART = 0x00100000
SCFIND_REGEXP = 0x00200000
SCFIND_POSIX = 0x00400000
SC_FOLDLEVELBASE = 0x400
SC_FOLDLEVELWHITEFLAG = 0x1000
SC_FOLDLEVELHEADERFLAG = 0x2000
SC_FOLDLEVELNUMBERMASK = 0x0FFF
SC_FOLDFLAG_LINEBEFORE_EXPANDED = 0x0002
SC_FOLDFLAG_LINEBEFORE_CONTRACTED = 0x0004
SC_FOLDFLAG_LINEAFTER_EXPANDED = 0x0008
SC_FOLDFLAG_LINEAFTER_CONTRACTED = 0x0010
SC_FOLDFLAG_LEVELNUMBERS = 0x0040
SC_TIME_FOREVER = 10000000
SC_WRAP_NONE = 0
SC_WRAP_WORD = 1
SC_WRAP_CHAR = 2
SC_WRAPVISUALFLAG_NONE = 0x0000
SC_WRAPVISUALFLAG_END = 0x0001
SC_WRAPVISUALFLAG_START = 0x0002
SC_WRAPVISUALFLAGLOC_DEFAULT = 0x0000
SC_WRAPVISUALFLAGLOC_END_BY_TEXT = 0x0001
SC_WRAPVISUALFLAGLOC_START_BY_TEXT = 0x0002
SC_WRAPINDENT_FIXED = 0
SC_WRAPINDENT_SAME = 1
SC_WRAPINDENT_INDENT = 2
SC_CACHE_NONE = 0
SC_CACHE_CARET = 1
SC_CACHE_PAGE = 2
SC_CACHE_DOCUMENT = 3
SC_EFF_QUALITY_MASK = 0xF
SC_EFF_QUALITY_DEFAULT = 0
SC_EFF_QUALITY_NON_ANTIALIASED = 1
SC_EFF_QUALITY_ANTIALIASED = 2
SC_EFF_QUALITY_LCD_OPTIMIZED = 3
SC_MULTIPASTE_ONCE = 0
SC_MULTIPASTE_EACH = 1
EDGE_NONE = 0
EDGE_LINE = 1
EDGE_BACKGROUND = 2
SC_STATUS_OK = 0
SC_STATUS_FAILURE = 1
SC_STATUS_BADALLOC = 2
SC_CURSORNORMAL = -1
SC_CURSORARROW = 2
SC_CURSORWAIT = 4
SC_CURSORREVERSEARROW = 7
VISIBLE_SLOP = 0x01
VISIBLE_STRICT = 0x04
CARET_SLOP = 0x01
CARET_STRICT = 0x04
CARET_JUMPS = 0x10
CARET_EVEN = 0x08
SC_SEL_STREAM = 0
SC_SEL_RECTANGLE = 1
SC_SEL_LINES = 2
SC_SEL_THIN = 3
SC_CARETSTICKY_OFF = 0
SC_CARETSTICKY_ON = 1
SC_CARETSTICKY_WHITESPACE = 2
SC_ALPHA_TRANSPARENT = 0
SC_ALPHA_OPAQUE = 255
SC_ALPHA_NOALPHA = 256
CARETSTYLE_INVISIBLE = 0
CARETSTYLE_LINE = 1
CARETSTYLE_BLOCK = 2
SC_MARGINOPTION_NONE = 0
SC_MARGINOPTION_SUBLINESELECT = 1
ANNOTATION_HIDDEN = 0
ANNOTATION_STANDARD = 1
ANNOTATION_BOXED = 2
UNDO_MAY_COALESCE = 1
SCVS_NONE = 0
SCVS_RECTANGULARSELECTION = 1
SCVS_USERACCESSIBLE = 2
SC_TECHNOLOGY_DEFAULT = 0
SC_TECHNOLOGY_DIRECTWRITE = 1
KEYWORDSET_MAX = 8
SC_TYPE_BOOLEAN = 0
SC_TYPE_INTEGER = 1
SC_TYPE_STRING = 2
SC_MOD_INSERTTEXT = 0x1
SC_MOD_DELETETEXT = 0x2
SC_MOD_CHANGESTYLE = 0x4
SC_MOD_CHANGEFOLD = 0x8
SC_PERFORMED_USER = 0x10
SC_PERFORMED_UNDO = 0x20
SC_PERFORMED_REDO = 0x40
SC_MULTISTEPUNDOREDO = 0x80
SC_LASTSTEPINUNDOREDO = 0x100
SC_MOD_CHANGEMARKER = 0x200
SC_MOD_BEFOREINSERT = 0x400
SC_MOD_BEFOREDELETE = 0x800
SC_MULTILINEUNDOREDO = 0x1000
SC_STARTACTION = 0x2000
SC_MOD_CHANGEINDICATOR = 0x4000
SC_MOD_CHANGELINESTATE = 0x8000
SC_MOD_CHANGEMARGIN = 0x10000
SC_MOD_CHANGEANNOTATION = 0x20000
SC_MOD_CONTAINER = 0x40000
SC_MOD_LEXERSTATE = 0x80000
SC_MODEVENTMASKALL = 0xFFFFF
SC_UPDATE_CONTENT = 0x1
SC_UPDATE_SELECTION = 0x2
SC_UPDATE_V_SCROLL = 0x4
SC_UPDATE_H_SCROLL = 0x8
SCK_DOWN = 300
SCK_UP = 301
SCK_LEFT = 302
SCK_RIGHT = 303
SCK_HOME = 304
SCK_END = 305
SCK_PRIOR = 306
SCK_NEXT = 307
SCK_DELETE = 308
SCK_INSERT = 309
SCK_ESCAPE = 7
SCK_BACK = 8
SCK_TAB = 9
SCK_RETURN = 13
SCK_ADD = 310
SCK_SUBTRACT = 311
SCK_DIVIDE = 312
SCK_WIN = 313
SCK_RWIN = 314
SCK_MENU = 315
SCMOD_NORM = 0
SCMOD_SHIFT = 1
SCMOD_CTRL = 2
SCMOD_ALT = 4
SCMOD_SUPER = 8
SCMOD_META = 16
SCLEX_CONTAINER = 0
SCLEX_NULL = 1
SCLEX_PYTHON = 2
SCLEX_CPP = 3
SCLEX_HTML = 4
SCLEX_XML = 5
SCLEX_PERL = 6
SCLEX_SQL = 7
SCLEX_VB = 8
SCLEX_PROPERTIES = 9
SCLEX_ERRORLIST = 10
SCLEX_MAKEFILE = 11
SCLEX_BATCH = 12
SCLEX_XCODE = 13
SCLEX_LATEX = 14
SCLEX_LUA = 15
SCLEX_DIFF = 16
SCLEX_CONF = 17
SCLEX_PASCAL = 18
SCLEX_AVE = 19
SCLEX_ADA = 20
SCLEX_LISP = 21
SCLEX_RUBY = 22
SCLEX_EIFFEL = 23
SCLEX_EIFFELKW = 24
SCLEX_TCL = 25
SCLEX_NNCRONTAB = 26
SCLEX_BULLANT = 27
SCLEX_VBSCRIPT = 28
SCLEX_BAAN = 31
SCLEX_MATLAB = 32
SCLEX_SCRIPTOL = 33
SCLEX_ASM = 34
SCLEX_CPPNOCASE = 35
SCLEX_FORTRAN = 36
SCLEX_F77 = 37
SCLEX_CSS = 38
SCLEX_POV = 39
SCLEX_LOUT = 40
SCLEX_ESCRIPT = 41
SCLEX_PS = 42
SCLEX_NSIS = 43
SCLEX_MMIXAL = 44
SCLEX_CLW = 45
SCLEX_CLWNOCASE = 46
SCLEX_LOT = 47
SCLEX_YAML = 48
SCLEX_TEX = 49
SCLEX_METAPOST = 50
SCLEX_POWERBASIC = 51
SCLEX_FORTH = 52
SCLEX_ERLANG = 53
SCLEX_OCTAVE = 54
SCLEX_MSSQL = 55
SCLEX_VERILOG = 56
SCLEX_KIX = 57
SCLEX_GUI4CLI = 58
SCLEX_SPECMAN = 59
SCLEX_AU3 = 60
SCLEX_APDL = 61
SCLEX_BASH = 62
SCLEX_ASN1 = 63
SCLEX_VHDL = 64
SCLEX_CAML = 65
SCLEX_BLITZBASIC = 66
SCLEX_PUREBASIC = 67
SCLEX_HASKELL = 68
SCLEX_PHPSCRIPT = 69
SCLEX_TADS3 = 70
SCLEX_REBOL = 71
SCLEX_SMALLTALK = 72
SCLEX_FLAGSHIP = 73
SCLEX_CSOUND = 74
SCLEX_FREEBASIC = 75
SCLEX_INNOSETUP = 76
SCLEX_OPAL = 77
SCLEX_SPICE = 78
SCLEX_D = 79
SCLEX_CMAKE = 80
SCLEX_GAP = 81
SCLEX_PLM = 82
SCLEX_PROGRESS = 83
SCLEX_ABAQUS = 84
SCLEX_ASYMPTOTE = 85
SCLEX_R = 86
SCLEX_MAGIK = 87
SCLEX_POWERSHELL = 88
SCLEX_MYSQL = 89
SCLEX_PO = 90
SCLEX_TAL = 91
SCLEX_COBOL = 92
SCLEX_TACL = 93
SCLEX_SORCUS = 94
SCLEX_POWERPRO = 95
SCLEX_NIMROD = 96
SCLEX_SML = 97
SCLEX_MARKDOWN = 98
SCLEX_TXT2TAGS = 99
SCLEX_A68K = 100
SCLEX_MODULA = 101
SCLEX_COFFEESCRIPT = 102
SCLEX_TCMD = 103
SCLEX_AVS = 104
SCLEX_ECL = 105
SCLEX_AUTOMATIC = 1000
SC_CP_DBCS = 1

-- Add text to the document at current position.
function sci:add_text(length, text)
  return self.send(2001, length, text)
end

-- Add array of cells to document.
function sci:add_styled_text(length, c)
  return self.send(2002, length, c)
end

-- Insert string at a position.
function sci:insert_text(pos, text)
  return self.send(2003, pos, text)
end

-- Delete all text in the document.
function sci:clear_all()
  return self.send(2004, 0, 0)
end

-- Set all style bytes to 0, remove all folding information.
function sci:clear_document_style()
  return self.send(2005, 0, 0)
end

-- Returns the number of bytes in the document.
function sci:get_length()
  return self.send(2006, 0, 0)
end

-- Returns the character byte at the position.
function sci:get_char_at(pos)
  return self.send(2007, pos, 0)
end

-- Returns the position of the caret.
function sci:get_current_pos()
  return self.send(2008, 0, 0)
end

-- Returns the position of the opposite end of the selection to the caret.
function sci:get_anchor()
  return self.send(2009, 0, 0)
end

-- Returns the style byte at the position.
function sci:get_style_at(pos)
  return self.send(2010, pos, 0)
end

-- Redoes the next action on the undo history.
function sci:redo()
  return self.send(2011, 0, 0)
end

-- Choose between collecting actions into the undo
-- history and discarding them.
function sci:set_undo_collection(collect_undo)
  return self.send(2012, collect_undo, 0)
end

-- Select all the text in the document.
function sci:select_all()
  return self.send(2013, 0, 0)
end

-- Remember the current position in the undo history as the position
-- at which the document was saved.
function sci:set_save_point()
  return self.send(2014, 0, 0)
end

-- Retrieve a buffer of cells.
-- Returns the number of bytes in the buffer not including terminating NULs.
function sci:get_styled_text(start_pos, end_pos)
  return self:send_with_textrange(2015, start_pos, end_pos)
end

-- Are there any redoable actions in the undo history?
function sci:can_redo()
  return self.send(2016, 0, 0)
end

-- Retrieve the line number at which a particular marker is located.
function sci:marker_line_from_handle(handle)
  return self.send(2017, handle, 0)
end

-- Delete a marker.
function sci:marker_delete_handle(handle)
  return self.send(2018, handle, 0)
end

-- Is undo history being collected?
function sci:get_undo_collection()
  return self.send(2019, 0, 0)
end

-- Are white space characters currently visible?
-- Returns one of SCWS_* constants.
function sci:get_view_ws()
  return self.send(2020, 0, 0)
end

-- Make white space characters invisible, always visible or visible outside indentation.
function sci:set_view_ws(view_ws)
  return self.send(2021, view_ws, 0)
end

-- Find the position from a point within the window.
function sci:position_from_point(x, y)
  return self.send(2022, x, y)
end

-- Find the position from a point within the window but return
-- INVALID_POSITION if not close to text.
function sci:position_from_point_close(x, y)
  return self.send(2023, x, y)
end

-- Set caret to start of a line and ensure it is visible.
function sci:goto_line(line)
  return self.send(2024, line, 0)
end

-- Set caret to a position and ensure it is visible.
function sci:goto_pos(pos)
  return self.send(2025, pos, 0)
end

-- Set the selection anchor to a position. The anchor is the opposite
-- end of the selection from the caret.
function sci:set_anchor(pos_anchor)
  return self.send(2026, pos_anchor, 0)
end

-- Retrieve the text of the line containing the caret.
-- Returns the index of the caret on the line.
function sci:get_cur_line(length)
  return self:send_with_stringresult(2027, length)
end

-- Retrieve the position of the last correctly styled character.
function sci:get_end_styled()
  return self.send(2028, 0, 0)
end

-- Convert all line endings in the document to one mode.
function sci:convert_eols(eol_mode)
  return self.send(2029, eol_mode, 0)
end

-- Retrieve the current end of line mode - one of CRLF, CR, or LF.
function sci:get_eolmode()
  return self.send(2030, 0, 0)
end

-- Set the current end of line mode.
function sci:set_eolmode(eol_mode)
  return self.send(2031, eol_mode, 0)
end

-- Set the current styling position to pos and the styling mask to mask.
-- The styling mask can be used to protect some bits in each styling byte from modification.
function sci:start_styling(pos, mask)
  return self.send(2032, pos, mask)
end

-- Change style from current styling position for length characters to a style
-- and move the current styling position to after this newly styled segment.
function sci:set_styling(length, style)
  return self.send(2033, length, style)
end

-- Is drawing done first into a buffer or direct to the screen?
function sci:get_buffered_draw()
  return self.send(2034, 0, 0)
end

-- If drawing is buffered then each line of text is drawn into a bitmap buffer
-- before drawing it to the screen to avoid flicker.
function sci:set_buffered_draw(buffered)
  return self.send(2035, buffered, 0)
end

-- Change the visible size of a tab to be a multiple of the width of a space character.
function sci:set_tab_width(tab_width)
  return self.send(2036, tab_width, 0)
end

-- Retrieve the visible size of a tab.
function sci:get_tab_width()
  return self.send(2121, 0, 0)
end

-- Set the code page used to interpret the bytes of the document as characters.
-- The SC_CP_UTF8 value can be used to enter Unicode mode.
function sci:set_code_page(code_page)
  return self.send(2037, code_page, 0)
end

-- Set the symbol used for a particular marker number.
function sci:marker_define(marker_number, marker_symbol)
  return self.send(2040, marker_number, marker_symbol)
end

-- Set the foreground colour used for a particular marker number.
function sci:marker_set_fore(marker_number, fore)
  return self.send(2041, marker_number, fore)
end

-- Set the background colour used for a particular marker number.
function sci:marker_set_back(marker_number, back)
  return self.send(2042, marker_number, back)
end

-- Set the background colour used for a particular marker number when its folding block is selected.
function sci:marker_set_back_selected(marker_number, back)
  return self.send(2292, marker_number, back)
end

-- Enable/disable highlight for current folding bloc (smallest one that contains the caret)
function sci:marker_enable_highlight(enabled)
  return self.send(2293, enabled, 0)
end

-- Add a marker to a line, returning an ID which can be used to find or delete the marker.
function sci:marker_add(line, marker_number)
  return self.send(2043, line, marker_number)
end

-- Delete a marker from a line.
function sci:marker_delete(line, marker_number)
  return self.send(2044, line, marker_number)
end

-- Delete all markers with a particular number from all lines.
function sci:marker_delete_all(marker_number)
  return self.send(2045, marker_number, 0)
end

-- Get a bit mask of all the markers set on a line.
function sci:marker_get(line)
  return self.send(2046, line, 0)
end

-- Find the next line at or after lineStart that includes a marker in mask.
-- Return -1 when no more lines.
function sci:marker_next(line_start, marker_mask)
  return self.send(2047, line_start, marker_mask)
end

-- Find the previous line before lineStart that includes a marker in mask.
function sci:marker_previous(line_start, marker_mask)
  return self.send(2048, line_start, marker_mask)
end

-- Define a marker from a pixmap.
function sci:marker_define_pixmap(marker_number, pixmap)
  return self.send(2049, marker_number, pixmap)
end

-- Add a set of markers to a line.
function sci:marker_add_set(line, set)
  return self.send(2466, line, set)
end

-- Set the alpha used for a marker that is drawn in the text area, not the margin.
function sci:marker_set_alpha(marker_number, alpha)
  return self.send(2476, marker_number, alpha)
end

-- Set a margin to be either numeric or symbolic.
function sci:set_margin_type_n(margin, margin_type)
  return self.send(2240, margin, margin_type)
end

-- Retrieve the type of a margin.
function sci:get_margin_type_n(margin)
  return self.send(2241, margin, 0)
end

-- Set the width of a margin to a width expressed in pixels.
function sci:set_margin_width_n(margin, pixel_width)
  return self.send(2242, margin, pixel_width)
end

-- Retrieve the width of a margin in pixels.
function sci:get_margin_width_n(margin)
  return self.send(2243, margin, 0)
end

-- Set a mask that determines which markers are displayed in a margin.
function sci:set_margin_mask_n(margin, mask)
  return self.send(2244, margin, mask)
end

-- Retrieve the marker mask of a margin.
function sci:get_margin_mask_n(margin)
  return self.send(2245, margin, 0)
end

-- Make a margin sensitive or insensitive to mouse clicks.
function sci:set_margin_sensitive_n(margin, sensitive)
  return self.send(2246, margin, sensitive)
end

-- Retrieve the mouse click sensitivity of a margin.
function sci:get_margin_sensitive_n(margin)
  return self.send(2247, margin, 0)
end

-- Set the cursor shown when the mouse is inside a margin.
function sci:set_margin_cursor_n(margin, cursor)
  return self.send(2248, margin, cursor)
end

-- Retrieve the cursor shown in a margin.
function sci:get_margin_cursor_n(margin)
  return self.send(2249, margin, 0)
end

-- Clear all the styles and make equivalent to the global default style.
function sci:style_clear_all()
  return self.send(2050, 0, 0)
end

-- Set the foreground colour of a style.
function sci:style_set_fore(style, fore)
  return self.send(2051, style, fore)
end

-- Set the background colour of a style.
function sci:style_set_back(style, back)
  return self.send(2052, style, back)
end

-- Set a style to be bold or not.
function sci:style_set_bold(style, bold)
  return self.send(2053, style, bold)
end

-- Set a style to be italic or not.
function sci:style_set_italic(style, italic)
  return self.send(2054, style, italic)
end

-- Set the size of characters of a style.
function sci:style_set_size(style, size_points)
  return self.send(2055, style, size_points)
end

-- Set the font of a style.
function sci:style_set_font(style, font_name)
  return self.send(2056, style, font_name)
end

-- Set a style to have its end of line filled or not.
function sci:style_set_eolfilled(style, filled)
  return self.send(2057, style, filled)
end

-- Reset the default style to its state at startup
function sci:style_reset_default()
  return self.send(2058, 0, 0)
end

-- Set a style to be underlined or not.
function sci:style_set_underline(style, underline)
  return self.send(2059, style, underline)
end

-- Get the foreground colour of a style.
function sci:style_get_fore(style)
  return self.send(2481, style, 0)
end

-- Get the background colour of a style.
function sci:style_get_back(style)
  return self.send(2482, style, 0)
end

-- Get is a style bold or not.
function sci:style_get_bold(style)
  return self.send(2483, style, 0)
end

-- Get is a style italic or not.
function sci:style_get_italic(style)
  return self.send(2484, style, 0)
end

-- Get the size of characters of a style.
function sci:style_get_size(style)
  return self.send(2485, style, 0)
end

-- Get the font of a style.
-- Returns the length of the fontName
function sci:style_get_font(style)
  return self:send_with_stringresult(2486, style)
end

-- Get is a style to have its end of line filled or not.
function sci:style_get_eolfilled(style)
  return self.send(2487, style, 0)
end

-- Get is a style underlined or not.
function sci:style_get_underline(style)
  return self.send(2488, style, 0)
end

-- Get is a style mixed case, or to force upper or lower case.
function sci:style_get_case(style)
  return self.send(2489, style, 0)
end

-- Get the character get of the font in a style.
function sci:style_get_character_set(style)
  return self.send(2490, style, 0)
end

-- Get is a style visible or not.
function sci:style_get_visible(style)
  return self.send(2491, style, 0)
end

-- Get is a style changeable or not (read only).
-- Experimental feature, currently buggy.
function sci:style_get_changeable(style)
  return self.send(2492, style, 0)
end

-- Get is a style a hotspot or not.
function sci:style_get_hot_spot(style)
  return self.send(2493, style, 0)
end

-- Set a style to be mixed case, or to force upper or lower case.
function sci:style_set_case(style, case_force)
  return self.send(2060, style, case_force)
end

-- Set the size of characters of a style. Size is in points multiplied by 100.
function sci:style_set_size_fractional(style, case_force)
  return self.send(2061, style, case_force)
end

-- Get the size of characters of a style in points multiplied by 100
function sci:style_get_size_fractional(style)
  return self.send(2062, style, 0)
end

-- Set the weight of characters of a style.
function sci:style_set_weight(style, weight)
  return self.send(2063, style, weight)
end

-- Get the weight of characters of a style.
function sci:style_get_weight(style)
  return self.send(2064, style, 0)
end

-- Set the character set of the font in a style.
function sci:style_set_character_set(style, character_set)
  return self.send(2066, style, character_set)
end

-- Set a style to be a hotspot or not.
function sci:style_set_hot_spot(style, hotspot)
  return self.send(2409, style, hotspot)
end

-- Set the foreground colour of the main and additional selections and whether to use this setting.
function sci:set_sel_fore(use_setting, fore)
  return self.send(2067, use_setting, fore)
end

-- Set the background colour of the main and additional selections and whether to use this setting.
function sci:set_sel_back(use_setting, back)
  return self.send(2068, use_setting, back)
end

-- Get the alpha of the selection.
function sci:get_sel_alpha()
  return self.send(2477, 0, 0)
end

-- Set the alpha of the selection.
function sci:set_sel_alpha(alpha)
  return self.send(2478, alpha, 0)
end

-- Is the selection end of line filled?
function sci:get_sel_eolfilled()
  return self.send(2479, 0, 0)
end

-- Set the selection to have its end of line filled or not.
function sci:set_sel_eolfilled(filled)
  return self.send(2480, filled, 0)
end

-- Set the foreground colour of the caret.
function sci:set_caret_fore(fore)
  return self.send(2069, fore, 0)
end

-- When key+modifier combination km is pressed perform msg.
function sci:assign_cmd_key(km, msg)
  return self.send(2070, km, msg)
end

-- When key+modifier combination km is pressed do nothing.
function sci:clear_cmd_key(km)
  return self.send(2071, km, 0)
end

-- Drop all key mappings.
function sci:clear_all_cmd_keys()
  return self.send(2072, 0, 0)
end

-- Set the styles for a segment of the document.
function sci:set_styling_ex(length, styles)
  return self.send(2073, length, styles)
end

-- Set a style to be visible or not.
function sci:style_set_visible(style, visible)
  return self.send(2074, style, visible)
end

-- Get the time in milliseconds that the caret is on and off.
function sci:get_caret_period()
  return self.send(2075, 0, 0)
end

-- Get the time in milliseconds that the caret is on and off. 0 = steady on.
function sci:set_caret_period(period_milliseconds)
  return self.send(2076, period_milliseconds, 0)
end

-- Set the set of characters making up words for when moving or selecting by word.
-- First sets defaults like SetCharsDefault.
function sci:set_word_chars(characters)
  return self.send(2077, 0, characters)
end

-- Start a sequence of actions that is undone and redone as a unit.
-- May be nested.
function sci:begin_undo_action()
  return self.send(2078, 0, 0)
end

-- End a sequence of actions that is undone and redone as a unit.
function sci:end_undo_action()
  return self.send(2079, 0, 0)
end

-- Set an indicator to plain, squiggle or TT.
function sci:indic_set_style(indic, style)
  return self.send(2080, indic, style)
end

-- Retrieve the style of an indicator.
function sci:indic_get_style(indic)
  return self.send(2081, indic, 0)
end

-- Set the foreground colour of an indicator.
function sci:indic_set_fore(indic, fore)
  return self.send(2082, indic, fore)
end

-- Retrieve the foreground colour of an indicator.
function sci:indic_get_fore(indic)
  return self.send(2083, indic, 0)
end

-- Set an indicator to draw under text or over(default).
function sci:indic_set_under(indic, under)
  return self.send(2510, indic, under)
end

-- Retrieve whether indicator drawn under or over text.
function sci:indic_get_under(indic)
  return self.send(2511, indic, 0)
end

-- Set the foreground colour of all whitespace and whether to use this setting.
function sci:set_whitespace_fore(use_setting, fore)
  return self.send(2084, use_setting, fore)
end

-- Set the background colour of all whitespace and whether to use this setting.
function sci:set_whitespace_back(use_setting, back)
  return self.send(2085, use_setting, back)
end

-- Set the size of the dots used to mark space characters.
function sci:set_whitespace_size(size)
  return self.send(2086, size, 0)
end

-- Get the size of the dots used to mark space characters.
function sci:get_whitespace_size()
  return self.send(2087, 0, 0)
end

-- Divide each styling byte into lexical class bits (default: 5) and indicator
-- bits (default: 3). If a lexer requires more than 32 lexical states, then this
-- is used to expand the possible states.
function sci:set_style_bits(bits)
  return self.send(2090, bits, 0)
end

-- Retrieve number of bits in style bytes used to hold the lexical state.
function sci:get_style_bits()
  return self.send(2091, 0, 0)
end

-- Used to hold extra styling information for each line.
function sci:set_line_state(line, state)
  return self.send(2092, line, state)
end

-- Retrieve the extra styling information for a line.
function sci:get_line_state(line)
  return self.send(2093, line, 0)
end

-- Retrieve the last line number that has line state.
function sci:get_max_line_state()
  return self.send(2094, 0, 0)
end

-- Is the background of the line containing the caret in a different colour?
function sci:get_caret_line_visible()
  return self.send(2095, 0, 0)
end

-- Display the background of the line containing the caret in a different colour.
function sci:set_caret_line_visible(show)
  return self.send(2096, show, 0)
end

-- Get the colour of the background of the line containing the caret.
function sci:get_caret_line_back()
  return self.send(2097, 0, 0)
end

-- Set the colour of the background of the line containing the caret.
function sci:set_caret_line_back(back)
  return self.send(2098, back, 0)
end

-- Set a style to be changeable or not (read only).
-- Experimental feature, currently buggy.
function sci:style_set_changeable(style, changeable)
  return self.send(2099, style, changeable)
end

-- Display a auto-completion list.
-- The lenEntered parameter indicates how many characters before
-- the caret should be used to provide context.
function sci:auto_cshow(len_entered, item_list)
  return self.send(2100, len_entered, item_list)
end

-- Remove the auto-completion list from the screen.
function sci:auto_ccancel()
  return self.send(2101, 0, 0)
end

-- Is there an auto-completion list visible?
function sci:auto_cactive()
  return self.send(2102, 0, 0)
end

-- Retrieve the position of the caret when the auto-completion list was displayed.
function sci:auto_cpos_start()
  return self.send(2103, 0, 0)
end

-- User has selected an item so remove the list and insert the selection.
function sci:auto_ccomplete()
  return self.send(2104, 0, 0)
end

-- Define a set of character that when typed cancel the auto-completion list.
function sci:auto_cstops(character_set)
  return self.send(2105, 0, character_set)
end

-- Change the separator character in the string setting up an auto-completion list.
-- Default is space but can be changed if items contain space.
function sci:auto_cset_separator(separator_character)
  return self.send(2106, separator_character, 0)
end

-- Retrieve the auto-completion list separator character.
function sci:auto_cget_separator()
  return self.send(2107, 0, 0)
end

-- Select the item in the auto-completion list that starts with a string.
function sci:auto_cselect(text)
  return self.send(2108, 0, text)
end

-- Should the auto-completion list be cancelled if the user backspaces to a
-- position before where the box was created.
function sci:auto_cset_cancel_at_start(cancel)
  return self.send(2110, cancel, 0)
end

-- Retrieve whether auto-completion cancelled by backspacing before start.
function sci:auto_cget_cancel_at_start()
  return self.send(2111, 0, 0)
end

-- Define a set of characters that when typed will cause the autocompletion to
-- choose the selected item.
function sci:auto_cset_fill_ups(character_set)
  return self.send(2112, 0, character_set)
end

-- Should a single item auto-completion list automatically choose the item.
function sci:auto_cset_choose_single(choose_single)
  return self.send(2113, choose_single, 0)
end

-- Retrieve whether a single item auto-completion list automatically choose the item.
function sci:auto_cget_choose_single()
  return self.send(2114, 0, 0)
end

-- Set whether case is significant when performing auto-completion searches.
function sci:auto_cset_ignore_case(ignore_case)
  return self.send(2115, ignore_case, 0)
end

-- Retrieve state of ignore case flag.
function sci:auto_cget_ignore_case()
  return self.send(2116, 0, 0)
end

-- Display a list of strings and send notification when user chooses one.
function sci:user_list_show(list_type, item_list)
  return self.send(2117, list_type, item_list)
end

-- Set whether or not autocompletion is hidden automatically when nothing matches.
function sci:auto_cset_auto_hide(auto_hide)
  return self.send(2118, auto_hide, 0)
end

-- Retrieve whether or not autocompletion is hidden automatically when nothing matches.
function sci:auto_cget_auto_hide()
  return self.send(2119, 0, 0)
end

-- Set whether or not autocompletion deletes any word characters
-- after the inserted text upon completion.
function sci:auto_cset_drop_rest_of_word(drop_rest_of_word)
  return self.send(2270, drop_rest_of_word, 0)
end

-- Retrieve whether or not autocompletion deletes any word characters
-- after the inserted text upon completion.
function sci:auto_cget_drop_rest_of_word()
  return self.send(2271, 0, 0)
end

-- Register an XPM image for use in autocompletion lists.
function sci:register_image(type, xpm_data)
  return self.send(2405, type, xpm_data)
end

-- Clear all the registered XPM images.
function sci:clear_registered_images()
  return self.send(2408, 0, 0)
end

-- Retrieve the auto-completion list type-separator character.
function sci:auto_cget_type_separator()
  return self.send(2285, 0, 0)
end

-- Change the type-separator character in the string setting up an auto-completion list.
-- Default is '?' but can be changed if items contain '?'.
function sci:auto_cset_type_separator(separator_character)
  return self.send(2286, separator_character, 0)
end

-- Set the maximum width, in characters, of auto-completion and user lists.
-- Set to 0 to autosize to fit longest item, which is the default.
function sci:auto_cset_max_width(character_count)
  return self.send(2208, character_count, 0)
end

-- Get the maximum width, in characters, of auto-completion and user lists.
function sci:auto_cget_max_width()
  return self.send(2209, 0, 0)
end

-- Set the maximum height, in rows, of auto-completion and user lists.
-- The default is 5 rows.
function sci:auto_cset_max_height(row_count)
  return self.send(2210, row_count, 0)
end

-- Set the maximum height, in rows, of auto-completion and user lists.
function sci:auto_cget_max_height()
  return self.send(2211, 0, 0)
end

-- Set the number of spaces used for one level of indentation.
function sci:set_indent(indent_size)
  return self.send(2122, indent_size, 0)
end

-- Retrieve indentation size.
function sci:get_indent()
  return self.send(2123, 0, 0)
end

-- Indentation will only use space characters if useTabs is false, otherwise
-- it will use a combination of tabs and spaces.
function sci:set_use_tabs(use_tabs)
  return self.send(2124, use_tabs, 0)
end

-- Retrieve whether tabs will be used in indentation.
function sci:get_use_tabs()
  return self.send(2125, 0, 0)
end

-- Change the indentation of a line to a number of columns.
function sci:set_line_indentation(line, indent_size)
  return self.send(2126, line, indent_size)
end

-- Retrieve the number of columns that a line is indented.
function sci:get_line_indentation(line)
  return self.send(2127, line, 0)
end

-- Retrieve the position before the first non indentation character on a line.
function sci:get_line_indent_position(line)
  return self.send(2128, line, 0)
end

-- Retrieve the column number of a position, taking tab width into account.
function sci:get_column(pos)
  return self.send(2129, pos, 0)
end

-- Count characters between two positions.
function sci:count_characters(start_pos, end_pos)
  return self.send(2633, start_pos, end_pos)
end

-- Show or hide the horizontal scroll bar.
-- Is the horizontal scroll bar visible?
function sci:set_hscroll_bar(show)
  return self.send(2130, show, 0)
end

-- Show or hide the horizontal scroll bar.
-- Is the horizontal scroll bar visible?
function sci:get_hscroll_bar()
  return self.send(2131, 0, 0)
end

-- Show or hide indentation guides.
function sci:set_indentation_guides(indent_view)
  return self.send(2132, indent_view, 0)
end

-- Are the indentation guides visible?
function sci:get_indentation_guides()
  return self.send(2133, 0, 0)
end

-- Set the highlighted indentation guide column.
-- 0 = no highlighted guide.
function sci:set_highlight_guide(column)
  return self.send(2134, column, 0)
end

-- Get the highlighted indentation guide column.
function sci:get_highlight_guide()
  return self.send(2135, 0, 0)
end

-- Get the position after the last visible characters on a line.
function sci:get_line_end_position(line)
  return self.send(2136, line, 0)
end

-- Get the code page used to interpret the bytes of the document as characters.
function sci:get_code_page()
  return self.send(2137, 0, 0)
end

-- Get the foreground colour of the caret.
function sci:get_caret_fore()
  return self.send(2138, 0, 0)
end

-- In read-only mode?
function sci:get_read_only()
  return self.send(2140, 0, 0)
end

-- Sets the position of the caret.
function sci:set_current_pos(pos)
  return self.send(2141, pos, 0)
end

-- Sets the position that starts the selection - this becomes the anchor.
function sci:set_selection_start(pos)
  return self.send(2142, pos, 0)
end

-- Returns the position at the start of the selection.
function sci:get_selection_start()
  return self.send(2143, 0, 0)
end

-- Sets the position that ends the selection - this becomes the currentPosition.
function sci:set_selection_end(pos)
  return self.send(2144, pos, 0)
end

-- Returns the position at the end of the selection.
function sci:get_selection_end()
  return self.send(2145, 0, 0)
end

-- Set caret to a position, while removing any existing selection.
function sci:set_empty_selection(pos)
  return self.send(2556, pos, 0)
end

-- Sets the print magnification added to the point size of each style for printing.
function sci:set_print_magnification(magnification)
  return self.send(2146, magnification, 0)
end

-- Returns the print magnification.
function sci:get_print_magnification()
  return self.send(2147, 0, 0)
end

-- Modify colours when printing for clearer printed text.
function sci:set_print_colour_mode(mode)
  return self.send(2148, mode, 0)
end

-- Returns the print colour mode.
function sci:get_print_colour_mode()
  return self.send(2149, 0, 0)
end

-- Find some text in the document.
function sci:find_text(start_pos, end_pos, text)
  return self:send_with_findtext(2150, start_pos, end_pos, text)
end

-- On Windows, will draw the document into a display context such as a printer.
function sci:format_range(draw, fr)
  return self.send(2151, draw, fr)
end

-- Retrieve the display line at the top of the display.
function sci:get_first_visible_line()
  return self.send(2152, 0, 0)
end

-- Retrieve the contents of a line.
-- Returns the length of the line.
function sci:get_line(line)
  return self:send_with_stringresult(2153, line)
end

-- Returns the number of lines in the document. There is always at least one.
function sci:get_line_count()
  return self.send(2154, 0, 0)
end

-- Sets the size in pixels of the left margin.
function sci:set_margin_left(pixel_width)
  return self.send(2155, 0, pixel_width)
end

-- Returns the size in pixels of the left margin.
function sci:get_margin_left()
  return self.send(2156, 0, 0)
end

-- Sets the size in pixels of the right margin.
function sci:set_margin_right(pixel_width)
  return self.send(2157, 0, pixel_width)
end

-- Returns the size in pixels of the right margin.
function sci:get_margin_right()
  return self.send(2158, 0, 0)
end

-- Is the document different from when it was last saved?
function sci:get_modify()
  return self.send(2159, 0, 0)
end

-- Select a range of text.
function sci:set_sel(start_pos, end_pos)
  return self.send(2160, start_pos, end_pos)
end

-- Retrieve the selected text.
-- Return the length of the text.
function sci:get_sel_text()
  return self:send_with_stringresult(2161)
end

-- Retrieve a range of text.
-- Return the length of the text.
function sci:get_text_range(start_pos, end_pos)
  return self:send_with_textrange(2162, start_pos, end_pos)
end

-- Draw the selection in normal style or with selection highlighted.
function sci:hide_selection(normal)
  return self.send(2163, normal, 0)
end

-- Retrieve the x value of the point in the window where a position is displayed.
function sci:point_xfrom_position(pos)
  return self.send(2164, 0, pos)
end

-- Retrieve the y value of the point in the window where a position is displayed.
function sci:point_yfrom_position(pos)
  return self.send(2165, 0, pos)
end

-- Retrieve the line containing a position.
function sci:line_from_position(pos)
  return self.send(2166, pos, 0)
end

-- Retrieve the position at the start of a line.
function sci:position_from_line(line)
  return self.send(2167, line, 0)
end

-- Scroll horizontally and vertically.
function sci:line_scroll(columns, lines)
  return self.send(2168, columns, lines)
end

-- Ensure the caret is visible.
function sci:scroll_caret()
  return self.send(2169, 0, 0)
end

-- Replace the selected text with the argument text.
function sci:replace_sel(text)
  return self.send(2170, 0, text)
end

-- Set to read only or read write.
function sci:set_read_only(read_only)
  return self.send(2171, read_only, 0)
end

-- Null operation.
function sci:null()
  return self.send(2172, 0, 0)
end

-- Will a paste succeed?
function sci:can_paste()
  return self.send(2173, 0, 0)
end

-- Are there any undoable actions in the undo history?
function sci:can_undo()
  return self.send(2174, 0, 0)
end

-- Delete the undo history.
function sci:empty_undo_buffer()
  return self.send(2175, 0, 0)
end

-- Undo one action in the undo history.
function sci:undo()
  return self.send(2176, 0, 0)
end

-- Cut the selection to the clipboard.
function sci:cut()
  return self.send(2177, 0, 0)
end

-- Copy the selection to the clipboard.
function sci:copy()
  return self.send(2178, 0, 0)
end

-- Paste the contents of the clipboard into the document replacing the selection.
function sci:paste()
  return self.send(2179, 0, 0)
end

-- Clear the selection.
function sci:clear()
  return self.send(2180, 0, 0)
end

-- Replace the contents of the document with the argument text.
function sci:set_text(text)
  return self.send(2181, 0, text)
end

-- Retrieve all the text in the document.
-- Returns number of characters retrieved.
function sci:get_text(length)
  return self:send_with_stringresult(2182, length)
end

-- Retrieve the number of characters in the document.
function sci:get_text_length()
  return self.send(2183, 0, 0)
end

-- Retrieve a pointer to a function that processes messages for this Scintilla.
function sci:get_direct_function()
  return self.send(2184, 0, 0)
end

-- Retrieve a pointer value to use as the first argument when calling
-- the function returned by GetDirectFunction.
function sci:get_direct_pointer()
  return self.send(2185, 0, 0)
end

-- Set to overtype (true) or insert mode.
function sci:set_overtype(overtype)
  return self.send(2186, overtype, 0)
end

-- Returns true if overtype mode is active otherwise false is returned.
function sci:get_overtype()
  return self.send(2187, 0, 0)
end

-- Set the width of the insert mode caret.
function sci:set_caret_width(pixel_width)
  return self.send(2188, pixel_width, 0)
end

-- Returns the width of the insert mode caret.
function sci:get_caret_width()
  return self.send(2189, 0, 0)
end

-- Sets the position that starts the target which is used for updating the
-- document without affecting the scroll position.
function sci:set_target_start(pos)
  return self.send(2190, pos, 0)
end

-- Get the position that starts the target.
function sci:get_target_start()
  return self.send(2191, 0, 0)
end

-- Sets the position that ends the target which is used for updating the
-- document without affecting the scroll position.
function sci:set_target_end(pos)
  return self.send(2192, pos, 0)
end

-- Get the position that ends the target.
function sci:get_target_end()
  return self.send(2193, 0, 0)
end

-- Replace the target text with the argument text.
-- Text is counted so it can contain NULs.
-- Returns the length of the replacement text.
function sci:replace_target(length, text)
  return self.send(2194, length, text)
end

-- Replace the target text with the argument text after \d processing.
-- Text is counted so it can contain NULs.
-- Looks for \d where d is between 1 and 9 and replaces these with the strings
-- matched in the last search operation which were surrounded by \( and \).
-- Returns the length of the replacement text including any change
-- caused by processing the \d patterns.
function sci:replace_target_re(length, text)
  return self.send(2195, length, text)
end

-- Search for a counted string in the target and set the target to the found
-- range. Text is counted so it can contain NULs.
-- Returns length of range or -1 for failure in which case target is not moved.
function sci:search_in_target(length, text)
  return self.send(2197, length, text)
end

-- Set the search flags used by SearchInTarget.
function sci:set_search_flags(flags)
  return self.send(2198, flags, 0)
end

-- Get the search flags used by SearchInTarget.
function sci:get_search_flags()
  return self.send(2199, 0, 0)
end

-- Show a call tip containing a definition near position pos.
function sci:call_tip_show(pos, definition)
  return self.send(2200, pos, definition)
end

-- Remove the call tip from the screen.
function sci:call_tip_cancel()
  return self.send(2201, 0, 0)
end

-- Is there an active call tip?
function sci:call_tip_active()
  return self.send(2202, 0, 0)
end

-- Retrieve the position where the caret was before displaying the call tip.
function sci:call_tip_pos_start()
  return self.send(2203, 0, 0)
end

-- Highlight a segment of the definition.
function sci:call_tip_set_hlt(start_pos, end_pos)
  return self.send(2204, start_pos, end_pos)
end

-- Set the background colour for the call tip.
function sci:call_tip_set_back(back)
  return self.send(2205, back, 0)
end

-- Set the foreground colour for the call tip.
function sci:call_tip_set_fore(fore)
  return self.send(2206, fore, 0)
end

-- Set the foreground colour for the highlighted part of the call tip.
function sci:call_tip_set_fore_hlt(fore)
  return self.send(2207, fore, 0)
end

-- Enable use of STYLE_CALLTIP and set call tip tab size in pixels.
function sci:call_tip_use_style(tab_size)
  return self.send(2212, tab_size, 0)
end

-- Set position of calltip, above or below text.
function sci:call_tip_set_position(above)
  return self.send(2213, above, 0)
end

-- Find the display line of a document line taking hidden lines into account.
function sci:visible_from_doc_line(line)
  return self.send(2220, line, 0)
end

-- Find the document line of a display line taking hidden lines into account.
function sci:doc_line_from_visible(line_display)
  return self.send(2221, line_display, 0)
end

-- The number of display lines needed to wrap a document line
function sci:wrap_count(line)
  return self.send(2235, line, 0)
end

-- Set the fold level of a line.
-- This encodes an integer level along with flags indicating whether the
-- line is a header and whether it is effectively white space.
function sci:set_fold_level(line, level)
  return self.send(2222, line, level)
end

-- Retrieve the fold level of a line.
function sci:get_fold_level(line)
  return self.send(2223, line, 0)
end

-- Find the last child line of a header line.
function sci:get_last_child(line, level)
  return self.send(2224, line, level)
end

-- Find the parent line of a child line.
function sci:get_fold_parent(line)
  return self.send(2225, line, 0)
end

-- Make a range of lines visible.
function sci:show_lines(line_start, line_end)
  return self.send(2226, line_start, line_end)
end

-- Make a range of lines invisible.
function sci:hide_lines(line_start, line_end)
  return self.send(2227, line_start, line_end)
end

-- Is a line visible?
function sci:get_line_visible(line)
  return self.send(2228, line, 0)
end

-- Are all lines visible?
function sci:get_all_lines_visible()
  return self.send(2236, 0, 0)
end

-- Show the children of a header line.
function sci:set_fold_expanded(line, expanded)
  return self.send(2229, line, expanded)
end

-- Is a header line expanded?
function sci:get_fold_expanded(line)
  return self.send(2230, line, 0)
end

-- Switch a header line between expanded and contracted.
function sci:toggle_fold(line)
  return self.send(2231, line, 0)
end

-- Ensure a particular line is visible by expanding any header line hiding it.
function sci:ensure_visible(line)
  return self.send(2232, line, 0)
end

-- Set some style options for folding.
function sci:set_fold_flags(flags)
  return self.send(2233, flags, 0)
end

-- Ensure a particular line is visible by expanding any header line hiding it.
-- Use the currently set visibility policy to determine which range to display.
function sci:ensure_visible_enforce_policy(line)
  return self.send(2234, line, 0)
end

-- Sets whether a tab pressed when caret is within indentation indents.
function sci:set_tab_indents(tab_indents)
  return self.send(2260, tab_indents, 0)
end

-- Does a tab pressed when caret is within indentation indent?
function sci:get_tab_indents()
  return self.send(2261, 0, 0)
end

-- Sets whether a backspace pressed when caret is within indentation unindents.
function sci:set_back_space_un_indents(bs_un_indents)
  return self.send(2262, bs_un_indents, 0)
end

-- Does a backspace pressed when caret is within indentation unindent?
function sci:get_back_space_un_indents()
  return self.send(2263, 0, 0)
end

-- Sets the time the mouse must sit still to generate a mouse dwell event.
function sci:set_mouse_dwell_time(period_milliseconds)
  return self.send(2264, period_milliseconds, 0)
end

-- Retrieve the time the mouse must sit still to generate a mouse dwell event.
function sci:get_mouse_dwell_time()
  return self.send(2265, 0, 0)
end

-- Get position of start of word.
function sci:word_start_position(pos, only_word_characters)
  return self.send(2266, pos, only_word_characters)
end

-- Get position of end of word.
function sci:word_end_position(pos, only_word_characters)
  return self.send(2267, pos, only_word_characters)
end

-- Sets whether text is word wrapped.
function sci:set_wrap_mode(mode)
  return self.send(2268, mode, 0)
end

-- Retrieve whether text is word wrapped.
function sci:get_wrap_mode()
  return self.send(2269, 0, 0)
end

-- Set the display mode of visual flags for wrapped lines.
function sci:set_wrap_visual_flags(wrap_visual_flags)
  return self.send(2460, wrap_visual_flags, 0)
end

-- Retrive the display mode of visual flags for wrapped lines.
function sci:get_wrap_visual_flags()
  return self.send(2461, 0, 0)
end

-- Set the location of visual flags for wrapped lines.
function sci:set_wrap_visual_flags_location(wrap_visual_flags_location)
  return self.send(2462, wrap_visual_flags_location, 0)
end

-- Retrive the location of visual flags for wrapped lines.
function sci:get_wrap_visual_flags_location()
  return self.send(2463, 0, 0)
end

-- Set the start indent for wrapped lines.
function sci:set_wrap_start_indent(indent)
  return self.send(2464, indent, 0)
end

-- Retrive the start indent for wrapped lines.
function sci:get_wrap_start_indent()
  return self.send(2465, 0, 0)
end

-- Sets how wrapped sublines are placed. Default is fixed.
function sci:set_wrap_indent_mode(mode)
  return self.send(2472, mode, 0)
end

-- Retrieve how wrapped sublines are placed. Default is fixed.
function sci:get_wrap_indent_mode()
  return self.send(2473, 0, 0)
end

-- Sets the degree of caching of layout information.
function sci:set_layout_cache(mode)
  return self.send(2272, mode, 0)
end

-- Retrieve the degree of caching of layout information.
function sci:get_layout_cache()
  return self.send(2273, 0, 0)
end

-- Sets the document width assumed for scrolling.
function sci:set_scroll_width(pixel_width)
  return self.send(2274, pixel_width, 0)
end

-- Retrieve the document width assumed for scrolling.
function sci:get_scroll_width()
  return self.send(2275, 0, 0)
end

-- Sets whether the maximum width line displayed is used to set scroll width.
function sci:set_scroll_width_tracking(tracking)
  return self.send(2516, tracking, 0)
end

-- Retrieve whether the scroll width tracks wide lines.
function sci:get_scroll_width_tracking()
  return self.send(2517, 0, 0)
end

-- Measure the pixel width of some text in a particular style.
-- NUL terminated text argument.
-- Does not handle tab or control characters.
function sci:text_width(style, text)
  return self.send(2276, style, text)
end

-- Sets the scroll range so that maximum scroll position has
-- the last line at the bottom of the view (default).
-- Setting this to false allows scrolling one page below the last line.
function sci:set_end_at_last_line(end_at_last_line)
  return self.send(2277, end_at_last_line, 0)
end

-- Retrieve whether the maximum scroll position has the last
-- line at the bottom of the view.
function sci:get_end_at_last_line()
  return self.send(2278, 0, 0)
end

-- Retrieve the height of a particular line of text in pixels.
function sci:text_height(line)
  return self.send(2279, line, 0)
end

-- Show or hide the vertical scroll bar.
function sci:set_vscroll_bar(show)
  return self.send(2280, show, 0)
end

-- Is the vertical scroll bar visible?
function sci:get_vscroll_bar()
  return self.send(2281, 0, 0)
end

-- Append a string to the end of the document without changing the selection.
function sci:append_text(length, text)
  return self.send(2282, length, text)
end

-- Is drawing done in two phases with backgrounds drawn before faoregrounds?
function sci:get_two_phase_draw()
  return self.send(2283, 0, 0)
end

-- In twoPhaseDraw mode, drawing is performed in two phases, first the background
-- and then the foreground. This avoids chopping off characters that overlap the next run.
function sci:set_two_phase_draw(two_phase)
  return self.send(2284, two_phase, 0)
end

-- Choose the quality level for text from the FontQuality enumeration.
function sci:set_font_quality(font_quality)
  return self.send(2611, font_quality, 0)
end

-- Retrieve the quality level for text.
function sci:get_font_quality()
  return self.send(2612, 0, 0)
end

-- Scroll so that a display line is at the top of the display.
function sci:set_first_visible_line(line_display)
  return self.send(2613, line_display, 0)
end

-- Change the effect of pasting when there are multiple selections.
function sci:set_multi_paste(multi_paste)
  return self.send(2614, multi_paste, 0)
end

-- Retrieve the effect of pasting when there are multiple selections..
function sci:get_multi_paste()
  return self.send(2615, 0, 0)
end

-- Retrieve the value of a tag from a regular expression search.
function sci:get_tag(tag_number)
  return self:send_with_stringresult(2616, tag_number)
end

-- Make the target range start and end be the same as the selection range start and end.
function sci:target_from_selection()
  return self.send(2287, 0, 0)
end

-- Join the lines in the target.
function sci:lines_join()
  return self.send(2288, 0, 0)
end

-- Split the lines in the target into lines that are less wide than pixelWidth
-- where possible.
function sci:lines_split(pixel_width)
  return self.send(2289, pixel_width, 0)
end

-- Set the colours used as a chequerboard pattern in the fold margin
function sci:set_fold_margin_colour(use_setting, back)
  return self.send(2290, use_setting, back)
end

-- Set the colours used as a chequerboard pattern in the fold margin
function sci:set_fold_margin_hi_colour(use_setting, fore)
  return self.send(2291, use_setting, fore)
end

-- # Start of key messages
-- Move caret down one line.
function sci:line_down()
  return self.send(2300, 0, 0)
end

-- Move caret down one line extending selection to new caret position.
function sci:line_down_extend()
  return self.send(2301, 0, 0)
end

-- Move caret up one line.
function sci:line_up()
  return self.send(2302, 0, 0)
end

-- Move caret up one line extending selection to new caret position.
function sci:line_up_extend()
  return self.send(2303, 0, 0)
end

-- Move caret left one character.
function sci:char_left()
  return self.send(2304, 0, 0)
end

-- Move caret left one character extending selection to new caret position.
function sci:char_left_extend()
  return self.send(2305, 0, 0)
end

-- Move caret right one character.
function sci:char_right()
  return self.send(2306, 0, 0)
end

-- Move caret right one character extending selection to new caret position.
function sci:char_right_extend()
  return self.send(2307, 0, 0)
end

-- Move caret left one word.
function sci:word_left()
  return self.send(2308, 0, 0)
end

-- Move caret left one word extending selection to new caret position.
function sci:word_left_extend()
  return self.send(2309, 0, 0)
end

-- Move caret right one word.
function sci:word_right()
  return self.send(2310, 0, 0)
end

-- Move caret right one word extending selection to new caret position.
function sci:word_right_extend()
  return self.send(2311, 0, 0)
end

-- Move caret to first position on line.
function sci:home()
  return self.send(2312, 0, 0)
end

-- Move caret to first position on line extending selection to new caret position.
function sci:home_extend()
  return self.send(2313, 0, 0)
end

-- Move caret to last position on line.
function sci:line_end()
  return self.send(2314, 0, 0)
end

-- Move caret to last position on line extending selection to new caret position.
function sci:line_end_extend()
  return self.send(2315, 0, 0)
end

-- Move caret to first position in document.
function sci:document_start()
  return self.send(2316, 0, 0)
end

-- Move caret to first position in document extending selection to new caret position.
function sci:document_start_extend()
  return self.send(2317, 0, 0)
end

-- Move caret to last position in document.
function sci:document_end()
  return self.send(2318, 0, 0)
end

-- Move caret to last position in document extending selection to new caret position.
function sci:document_end_extend()
  return self.send(2319, 0, 0)
end

-- Move caret one page up.
function sci:page_up()
  return self.send(2320, 0, 0)
end

-- Move caret one page up extending selection to new caret position.
function sci:page_up_extend()
  return self.send(2321, 0, 0)
end

-- Move caret one page down.
function sci:page_down()
  return self.send(2322, 0, 0)
end

-- Move caret one page down extending selection to new caret position.
function sci:page_down_extend()
  return self.send(2323, 0, 0)
end

-- Switch from insert to overtype mode or the reverse.
function sci:edit_toggle_overtype()
  return self.send(2324, 0, 0)
end

-- Cancel any modes such as call tip or auto-completion list display.
function sci:cancel()
  return self.send(2325, 0, 0)
end

-- Delete the selection or if no selection, the character before the caret.
function sci:delete_back()
  return self.send(2326, 0, 0)
end

-- If selection is empty or all on one line replace the selection with a tab character.
-- If more than one line selected, indent the lines.
function sci:tab()
  return self.send(2327, 0, 0)
end

-- Dedent the selected lines.
function sci:back_tab()
  return self.send(2328, 0, 0)
end

-- Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
function sci:new_line()
  return self.send(2329, 0, 0)
end

-- Insert a Form Feed character.
function sci:form_feed()
  return self.send(2330, 0, 0)
end

-- Move caret to before first visible character on line.
-- If already there move to first character on line.
function sci:vchome()
  return self.send(2331, 0, 0)
end

-- Like VCHome but extending selection to new caret position.
function sci:vchome_extend()
  return self.send(2332, 0, 0)
end

-- Magnify the displayed text by increasing the sizes by 1 point.
function sci:zoom_in()
  return self.send(2333, 0, 0)
end

-- Make the displayed text smaller by decreasing the sizes by 1 point.
function sci:zoom_out()
  return self.send(2334, 0, 0)
end

-- Delete the word to the left of the caret.
function sci:del_word_left()
  return self.send(2335, 0, 0)
end

-- Delete the word to the right of the caret.
function sci:del_word_right()
  return self.send(2336, 0, 0)
end

-- Delete the word to the right of the caret, but not the trailing non-word characters.
function sci:del_word_right_end()
  return self.send(2518, 0, 0)
end

-- Cut the line containing the caret.
function sci:line_cut()
  return self.send(2337, 0, 0)
end

-- Delete the line containing the caret.
function sci:line_delete()
  return self.send(2338, 0, 0)
end

-- Switch the current line with the previous.
function sci:line_transpose()
  return self.send(2339, 0, 0)
end

-- Duplicate the current line.
function sci:line_duplicate()
  return self.send(2404, 0, 0)
end

-- Transform the selection to lower case.
function sci:lower_case()
  return self.send(2340, 0, 0)
end

-- Transform the selection to upper case.
function sci:upper_case()
  return self.send(2341, 0, 0)
end

-- Scroll the document down, keeping the caret visible.
function sci:line_scroll_down()
  return self.send(2342, 0, 0)
end

-- Scroll the document up, keeping the caret visible.
function sci:line_scroll_up()
  return self.send(2343, 0, 0)
end

-- Delete the selection or if no selection, the character before the caret.
-- Will not delete the character before at the start of a line.
function sci:delete_back_not_line()
  return self.send(2344, 0, 0)
end

-- Move caret to first position on display line.
function sci:home_display()
  return self.send(2345, 0, 0)
end

-- Move caret to first position on display line extending selection to
-- new caret position.
function sci:home_display_extend()
  return self.send(2346, 0, 0)
end

-- Move caret to last position on display line.
function sci:line_end_display()
  return self.send(2347, 0, 0)
end

-- Move caret to last position on display line extending selection to new
-- caret position.
function sci:line_end_display_extend()
  return self.send(2348, 0, 0)
end

function sci:home_wrap()
  return self.send(2349, 0, 0)
end

function sci:home_wrap_extend()
  return self.send(2450, 0, 0)
end

function sci:line_end_wrap()
  return self.send(2451, 0, 0)
end

function sci:line_end_wrap_extend()
  return self.send(2452, 0, 0)
end

function sci:vchome_wrap()
  return self.send(2453, 0, 0)
end

function sci:vchome_wrap_extend()
  return self.send(2454, 0, 0)
end

-- Copy the line containing the caret.
function sci:line_copy()
  return self.send(2455, 0, 0)
end

-- Move the caret inside current view if it's not there already.
function sci:move_caret_inside_view()
  return self.send(2401, 0, 0)
end

-- How many characters are on a line, including end of line characters?
function sci:line_length(line)
  return self.send(2350, line, 0)
end

-- Highlight the characters at two positions.
function sci:brace_highlight(pos1, pos2)
  return self.send(2351, pos1, pos2)
end

-- Use specified indicator to highlight matching braces instead of changing their style.
function sci:brace_highlight_indicator(use_brace_highlight_indicator, indicator)
  return self.send(2498, use_brace_highlight_indicator, indicator)
end

-- Highlight the character at a position indicating there is no matching brace.
function sci:brace_bad_light(pos)
  return self.send(2352, pos, 0)
end

-- Use specified indicator to highlight non matching brace instead of changing its style.
function sci:brace_bad_light_indicator(use_brace_bad_light_indicator, indicator)
  return self.send(2499, use_brace_bad_light_indicator, indicator)
end

-- Find the position of a matching brace or INVALID_POSITION if no match.
function sci:brace_match(pos)
  return self.send(2353, pos, 0)
end

-- Are the end of line characters visible?
function sci:get_view_eol()
  return self.send(2355, 0, 0)
end

-- Make the end of line characters visible or invisible.
function sci:set_view_eol(visible)
  return self.send(2356, visible, 0)
end

-- Retrieve a pointer to the document object.
function sci:get_doc_pointer()
  return self.send(2357, 0, 0)
end

-- Change the document object used.
function sci:set_doc_pointer(pointer)
  return self.send(2358, 0, pointer)
end

-- Set which document modification events are sent to the container.
function sci:set_mod_event_mask(mask)
  return self.send(2359, mask, 0)
end

-- Retrieve the column number which text should be kept within.
function sci:get_edge_column()
  return self.send(2360, 0, 0)
end

-- Set the column number of the edge.
-- If text goes past the edge then it is highlighted.
function sci:set_edge_column(column)
  return self.send(2361, column, 0)
end

-- Retrieve the edge highlight mode.
function sci:get_edge_mode()
  return self.send(2362, 0, 0)
end

-- The edge may be displayed by a line (EDGE_LINE) or by highlighting text that
-- goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
function sci:set_edge_mode(mode)
  return self.send(2363, mode, 0)
end

-- Retrieve the colour used in edge indication.
function sci:get_edge_colour()
  return self.send(2364, 0, 0)
end

-- Change the colour used in edge indication.
function sci:set_edge_colour(edge_colour)
  return self.send(2365, edge_colour, 0)
end

-- Sets the current caret position to be the search anchor.
function sci:search_anchor()
  return self.send(2366, 0, 0)
end

-- Find some text starting at the search anchor.
-- Does not ensure the selection is visible.
function sci:search_next(flags, text)
  return self.send(2367, flags, text)
end

-- Find some text starting at the search anchor and moving backwards.
-- Does not ensure the selection is visible.
function sci:search_prev(flags, text)
  return self.send(2368, flags, text)
end

-- Retrieves the number of lines completely visible.
function sci:lines_on_screen()
  return self.send(2370, 0, 0)
end

-- Set whether a pop up menu is displayed automatically when the user presses
-- the wrong mouse button.
function sci:use_pop_up(allow_pop_up)
  return self.send(2371, allow_pop_up, 0)
end

-- Is the selection rectangular? The alternative is the more common stream selection.
function sci:selection_is_rectangle()
  return self.send(2372, 0, 0)
end

-- Set the zoom level. This number of points is added to the size of all fonts.
-- It may be positive to magnify or negative to reduce.
-- Retrieve the zoom level.
function sci:set_zoom(zoom)
  return self.send(2373, zoom, 0)
end

-- Set the zoom level. This number of points is added to the size of all fonts.
-- It may be positive to magnify or negative to reduce.
-- Retrieve the zoom level.
function sci:get_zoom()
  return self.send(2374, 0, 0)
end

-- Create a new document object.
-- Starts with reference count of 1 and not selected into editor.
-- Extend life of document.
-- Release a reference to the document, deleting document if it fades to black.
function sci:create_document()
  return self.send(2375, 0, 0)
end

-- Create a new document object.
-- Starts with reference count of 1 and not selected into editor.
-- Extend life of document.
-- Release a reference to the document, deleting document if it fades to black.
function sci:add_ref_document(doc)
  return self.send(2376, 0, doc)
end

-- Create a new document object.
-- Starts with reference count of 1 and not selected into editor.
-- Extend life of document.
-- Release a reference to the document, deleting document if it fades to black.
function sci:release_document(doc)
  return self.send(2377, 0, doc)
end

-- Get which document modification events are sent to the container.
function sci:get_mod_event_mask()
  return self.send(2378, 0, 0)
end

-- Change internal focus flag.
-- Get internal focus flag.
function sci:set_focus(focus)
  return self.send(2380, focus, 0)
end

-- Change internal focus flag.
-- Get internal focus flag.
function sci:get_focus()
  return self.send(2381, 0, 0)
end

-- Change error status - 0 = OK.
-- Get error status.
function sci:set_status(status_code)
  return self.send(2382, status_code, 0)
end

-- Change error status - 0 = OK.
-- Get error status.
function sci:get_status()
  return self.send(2383, 0, 0)
end

-- Set whether the mouse is captured when its button is pressed.
-- Get whether mouse gets captured.
function sci:set_mouse_down_captures(captures)
  return self.send(2384, captures, 0)
end

-- Set whether the mouse is captured when its button is pressed.
-- Get whether mouse gets captured.
function sci:get_mouse_down_captures()
  return self.send(2385, 0, 0)
end

-- Sets the cursor to one of the SC_CURSOR* values.
-- Get cursor type.
function sci:set_cursor(cursor_type)
  return self.send(2386, cursor_type, 0)
end

-- Sets the cursor to one of the SC_CURSOR* values.
-- Get cursor type.
function sci:get_cursor()
  return self.send(2387, 0, 0)
end

-- Change the way control characters are displayed:
-- If symbol is < 32, keep the drawn way, else, use the given character.
-- Get the way control characters are displayed.
function sci:set_control_char_symbol(symbol)
  return self.send(2388, symbol, 0)
end

-- Change the way control characters are displayed:
-- If symbol is < 32, keep the drawn way, else, use the given character.
-- Get the way control characters are displayed.
function sci:get_control_char_symbol()
  return self.send(2389, 0, 0)
end

-- Move to the previous change in capitalisation.
-- Move to the previous change in capitalisation extending selection
-- to new caret position.
-- Move to the change next in capitalisation.
-- Move to the next change in capitalisation extending selection
-- to new caret position.
function sci:word_part_left()
  return self.send(2390, 0, 0)
end

-- Move to the previous change in capitalisation.
-- Move to the previous change in capitalisation extending selection
-- to new caret position.
-- Move to the change next in capitalisation.
-- Move to the next change in capitalisation extending selection
-- to new caret position.
function sci:word_part_left_extend()
  return self.send(2391, 0, 0)
end

-- Move to the previous change in capitalisation.
-- Move to the previous change in capitalisation extending selection
-- to new caret position.
-- Move to the change next in capitalisation.
-- Move to the next change in capitalisation extending selection
-- to new caret position.
function sci:word_part_right()
  return self.send(2392, 0, 0)
end

-- Move to the previous change in capitalisation.
-- Move to the previous change in capitalisation extending selection
-- to new caret position.
-- Move to the change next in capitalisation.
-- Move to the next change in capitalisation extending selection
-- to new caret position.
function sci:word_part_right_extend()
  return self.send(2393, 0, 0)
end

-- Constants for use with SetVisiblePolicy, similar to SetCaretPolicy.
-- Set the way the display area is determined when a particular line
-- is to be moved to by Find, FindNext, GotoLine, etc.
function sci:set_visible_policy(visible_policy, visible_slop)
  return self.send(2394, visible_policy, visible_slop)
end

-- Delete back from the current position to the start of the line.
function sci:del_line_left()
  return self.send(2395, 0, 0)
end

-- Delete forwards from the current position to the end of the line.
function sci:del_line_right()
  return self.send(2396, 0, 0)
end

-- Get and Set the xOffset (ie, horizonal scroll position).
function sci:set_xoffset(new_offset)
  return self.send(2397, new_offset, 0)
end

-- Get and Set the xOffset (ie, horizonal scroll position).
function sci:get_xoffset()
  return self.send(2398, 0, 0)
end

-- Set the last x chosen value to be the caret x position.
function sci:choose_caret_x()
  return self.send(2399, 0, 0)
end

-- Set the focus to this Scintilla widget.
function sci:grab_focus()
  return self.send(2400, 0, 0)
end

-- Set the way the caret is kept visible when going sideway.
-- The exclusion zone is given in pixels.
function sci:set_xcaret_policy(caret_policy, caret_slop)
  return self.send(2402, caret_policy, caret_slop)
end

-- Set the way the line the caret is on is kept visible.
-- The exclusion zone is given in lines.
function sci:set_ycaret_policy(caret_policy, caret_slop)
  return self.send(2403, caret_policy, caret_slop)
end

-- Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
function sci:set_print_wrap_mode(mode)
  return self.send(2406, mode, 0)
end

-- Is printing line wrapped?
function sci:get_print_wrap_mode()
  return self.send(2407, 0, 0)
end

-- Set a fore colour for active hotspots.
function sci:set_hotspot_active_fore(use_setting, fore)
  return self.send(2410, use_setting, fore)
end

-- Get the fore colour for active hotspots.
function sci:get_hotspot_active_fore()
  return self.send(2494, 0, 0)
end

-- Set a back colour for active hotspots.
function sci:set_hotspot_active_back(use_setting, back)
  return self.send(2411, use_setting, back)
end

-- Get the back colour for active hotspots.
function sci:get_hotspot_active_back()
  return self.send(2495, 0, 0)
end

-- Enable / Disable underlining active hotspots.
function sci:set_hotspot_active_underline(underline)
  return self.send(2412, underline, 0)
end

-- Get whether underlining for active hotspots.
function sci:get_hotspot_active_underline()
  return self.send(2496, 0, 0)
end

-- Limit hotspots to single line so hotspots on two lines don't merge.
function sci:set_hotspot_single_line(single_line)
  return self.send(2421, single_line, 0)
end

-- Get the HotspotSingleLine property
function sci:get_hotspot_single_line()
  return self.send(2497, 0, 0)
end

-- Move caret between paragraphs (delimited by empty lines).
function sci:para_down()
  return self.send(2413, 0, 0)
end

-- Move caret between paragraphs (delimited by empty lines).
function sci:para_down_extend()
  return self.send(2414, 0, 0)
end

-- Move caret between paragraphs (delimited by empty lines).
function sci:para_up()
  return self.send(2415, 0, 0)
end

-- Move caret between paragraphs (delimited by empty lines).
function sci:para_up_extend()
  return self.send(2416, 0, 0)
end

-- Given a valid document position, return the previous position taking code
-- page into account. Returns 0 if passed 0.
function sci:position_before(pos)
  return self.send(2417, pos, 0)
end

-- Given a valid document position, return the next position taking code
-- page into account. Maximum value returned is the last position in the document.
function sci:position_after(pos)
  return self.send(2418, pos, 0)
end

-- Copy a range of text to the clipboard. Positions are clipped into the document.
function sci:copy_range(start_pos, end_pos)
  return self.send(2419, start_pos, end_pos)
end

-- Copy argument text to the clipboard.
function sci:copy_text(length, text)
  return self.send(2420, length, text)
end

-- Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or
-- by lines (SC_SEL_LINES).
function sci:set_selection_mode(mode)
  return self.send(2422, mode, 0)
end

-- Get the mode of the current selection.
function sci:get_selection_mode()
  return self.send(2423, 0, 0)
end

-- Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
function sci:get_line_sel_start_position(line)
  return self.send(2424, line, 0)
end

-- Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line).
function sci:get_line_sel_end_position(line)
  return self.send(2425, line, 0)
end

-- # RectExtended rectangular selection moves
-- Move caret down one line, extending rectangular selection to new caret position.
function sci:line_down_rect_extend()
  return self.send(2426, 0, 0)
end

-- Move caret up one line, extending rectangular selection to new caret position.
function sci:line_up_rect_extend()
  return self.send(2427, 0, 0)
end

-- Move caret left one character, extending rectangular selection to new caret position.
function sci:char_left_rect_extend()
  return self.send(2428, 0, 0)
end

-- Move caret right one character, extending rectangular selection to new caret position.
function sci:char_right_rect_extend()
  return self.send(2429, 0, 0)
end

-- Move caret to first position on line, extending rectangular selection to new caret position.
function sci:home_rect_extend()
  return self.send(2430, 0, 0)
end

-- Move caret to before first visible character on line.
-- If already there move to first character on line.
-- In either case, extend rectangular selection to new caret position.
function sci:vchome_rect_extend()
  return self.send(2431, 0, 0)
end

-- Move caret to last position on line, extending rectangular selection to new caret position.
function sci:line_end_rect_extend()
  return self.send(2432, 0, 0)
end

-- Move caret one page up, extending rectangular selection to new caret position.
function sci:page_up_rect_extend()
  return self.send(2433, 0, 0)
end

-- Move caret one page down, extending rectangular selection to new caret position.
function sci:page_down_rect_extend()
  return self.send(2434, 0, 0)
end

-- Move caret to top of page, or one page up if already at top of page.
function sci:stuttered_page_up()
  return self.send(2435, 0, 0)
end

-- Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
function sci:stuttered_page_up_extend()
  return self.send(2436, 0, 0)
end

-- Move caret to bottom of page, or one page down if already at bottom of page.
function sci:stuttered_page_down()
  return self.send(2437, 0, 0)
end

-- Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
function sci:stuttered_page_down_extend()
  return self.send(2438, 0, 0)
end

-- Move caret left one word, position cursor at end of word.
function sci:word_left_end()
  return self.send(2439, 0, 0)
end

-- Move caret left one word, position cursor at end of word, extending selection to new caret position.
function sci:word_left_end_extend()
  return self.send(2440, 0, 0)
end

-- Move caret right one word, position cursor at end of word.
function sci:word_right_end()
  return self.send(2441, 0, 0)
end

-- Move caret right one word, position cursor at end of word, extending selection to new caret position.
function sci:word_right_end_extend()
  return self.send(2442, 0, 0)
end

-- Set the set of characters making up whitespace for when moving or selecting by word.
-- Should be called after SetWordChars.
function sci:set_whitespace_chars(characters)
  return self.send(2443, 0, characters)
end

-- Reset the set of characters for whitespace and word characters to the defaults.
function sci:set_chars_default()
  return self.send(2444, 0, 0)
end

-- Get currently selected item position in the auto-completion list
function sci:auto_cget_current()
  return self.send(2445, 0, 0)
end

-- Get currently selected item text in the auto-completion list
-- Returns the length of the item text
function sci:auto_cget_current_text()
  return self:send_with_stringresult(2610)
end

-- Enlarge the document to a particular size of text bytes.
function sci:allocate(bytes)
  return self.send(2446, bytes, 0)
end

-- Returns the target converted to UTF8.
-- Return the length in bytes.
function sci:target_as_utf8()
  return self:send_with_stringresult(2447)
end

-- Set the length of the utf8 argument for calling EncodedFromUTF8.
-- Set to -1 and the string will be measured to the first nul.
function sci:set_length_for_encode(bytes)
  return self.send(2448, bytes, 0)
end

-- Translates a UTF8 string into the document encoding.
-- Return the length of the result in bytes.
-- On error return 0.
function sci:encoded_from_utf8(utf8)
  return self:send_with_stringresult(2449, utf8)
end

-- Find the position of a column on a line taking into account tabs and
-- multi-byte characters. If beyond end of line, return line end position.
function sci:find_column(line, column)
  return self.send(2456, line, column)
end

-- Can the caret preferred x position only be changed by explicit movement commands?
function sci:get_caret_sticky()
  return self.send(2457, 0, 0)
end

-- Stop the caret preferred x position changing when the user types.
function sci:set_caret_sticky(use_caret_sticky_behaviour)
  return self.send(2458, use_caret_sticky_behaviour, 0)
end

-- Switch between sticky and non-sticky: meant to be bound to a key.
function sci:toggle_caret_sticky()
  return self.send(2459, 0, 0)
end

-- Enable/Disable convert-on-paste for line endings
function sci:set_paste_convert_endings(convert)
  return self.send(2467, convert, 0)
end

-- Get convert-on-paste setting
function sci:get_paste_convert_endings()
  return self.send(2468, 0, 0)
end

-- Duplicate the selection. If selection empty duplicate the line containing the caret.
function sci:selection_duplicate()
  return self.send(2469, 0, 0)
end

-- Set background alpha of the caret line.
function sci:set_caret_line_back_alpha(alpha)
  return self.send(2470, alpha, 0)
end

-- Get the background alpha of the caret line.
function sci:get_caret_line_back_alpha()
  return self.send(2471, 0, 0)
end

-- Set the style of the caret to be drawn.
function sci:set_caret_style(caret_style)
  return self.send(2512, caret_style, 0)
end

-- Returns the current style of the caret.
function sci:get_caret_style()
  return self.send(2513, 0, 0)
end

-- Set the indicator used for IndicatorFillRange and IndicatorClearRange
function sci:set_indicator_current(indicator)
  return self.send(2500, indicator, 0)
end

-- Get the current indicator
function sci:get_indicator_current()
  return self.send(2501, 0, 0)
end

-- Set the value used for IndicatorFillRange
function sci:set_indicator_value(value)
  return self.send(2502, value, 0)
end

-- Get the current indicator vaue
function sci:get_indicator_value()
  return self.send(2503, 0, 0)
end

-- Turn a indicator on over a range.
function sci:indicator_fill_range(position, fill_length)
  return self.send(2504, position, fill_length)
end

-- Turn a indicator off over a range.
function sci:indicator_clear_range(position, clear_length)
  return self.send(2505, position, clear_length)
end

-- Are any indicators present at position?
function sci:indicator_all_on_for(position)
  return self.send(2506, position, 0)
end

-- What value does a particular indicator have at at a position?
function sci:indicator_value_at(indicator, position)
  return self.send(2507, indicator, position)
end

-- Where does a particular indicator start?
function sci:indicator_start(indicator, position)
  return self.send(2508, indicator, position)
end

-- Where does a particular indicator end?
function sci:indicator_end(indicator, position)
  return self.send(2509, indicator, position)
end

-- Set number of entries in position cache
function sci:set_position_cache(size)
  return self.send(2514, size, 0)
end

-- How many entries are allocated to the position cache?
function sci:get_position_cache()
  return self.send(2515, 0, 0)
end

-- Copy the selection, if selection empty copy the line with the caret
function sci:copy_allow_line()
  return self.send(2519, 0, 0)
end

-- Compact the document buffer and return a read-only pointer to the
-- characters in the document.
function sci:get_character_pointer()
  return self.send(2520, 0, 0)
end

-- Always interpret keyboard input as Unicode
function sci:set_keys_unicode(keys_unicode)
  return self.send(2521, keys_unicode, 0)
end

-- Are keys always interpreted as Unicode?
function sci:get_keys_unicode()
  return self.send(2522, 0, 0)
end

-- Set the alpha fill colour of the given indicator.
function sci:indic_set_alpha(indicator, alpha)
  return self.send(2523, indicator, alpha)
end

-- Get the alpha fill colour of the given indicator.
function sci:indic_get_alpha(indicator)
  return self.send(2524, indicator, 0)
end

-- Set the alpha outline colour of the given indicator.
function sci:indic_set_outline_alpha(indicator, alpha)
  return self.send(2558, indicator, alpha)
end

-- Get the alpha outline colour of the given indicator.
function sci:indic_get_outline_alpha(indicator)
  return self.send(2559, indicator, 0)
end

-- Set extra ascent for each line
function sci:set_extra_ascent(extra_ascent)
  return self.send(2525, extra_ascent, 0)
end

-- Get extra ascent for each line
function sci:get_extra_ascent()
  return self.send(2526, 0, 0)
end

-- Set extra descent for each line
function sci:set_extra_descent(extra_descent)
  return self.send(2527, extra_descent, 0)
end

-- Get extra descent for each line
function sci:get_extra_descent()
  return self.send(2528, 0, 0)
end

-- Which symbol was defined for markerNumber with MarkerDefine
function sci:marker_symbol_defined(marker_number)
  return self.send(2529, marker_number, 0)
end

-- Set the text in the text margin for a line
function sci:margin_set_text(line, text)
  return self.send(2530, line, text)
end

-- Get the text in the text margin for a line
function sci:margin_get_text(line)
  return self:send_with_stringresult(2531, line)
end

-- Set the style number for the text margin for a line
function sci:margin_set_style(line, style)
  return self.send(2532, line, style)
end

-- Get the style number for the text margin for a line
function sci:margin_get_style(line)
  return self.send(2533, line, 0)
end

-- Set the style in the text margin for a line
function sci:margin_set_styles(line, styles)
  return self.send(2534, line, styles)
end

-- Get the styles in the text margin for a line
function sci:margin_get_styles(line)
  return self:send_with_stringresult(2535, line)
end

-- Clear the margin text on all lines
function sci:margin_text_clear_all()
  return self.send(2536, 0, 0)
end

-- Get the start of the range of style numbers used for margin text
function sci:margin_set_style_offset(style)
  return self.send(2537, style, 0)
end

-- Get the start of the range of style numbers used for margin text
function sci:margin_get_style_offset()
  return self.send(2538, 0, 0)
end

-- Set the margin options.
function sci:set_margin_options(margin_options)
  return self.send(2539, margin_options, 0)
end

-- Get the margin options.
function sci:get_margin_options()
  return self.send(2557, 0, 0)
end

-- Set the annotation text for a line
function sci:annotation_set_text(line, text)
  return self.send(2540, line, text)
end

-- Get the annotation text for a line
function sci:annotation_get_text(line)
  return self:send_with_stringresult(2541, line)
end

-- Set the style number for the annotations for a line
function sci:annotation_set_style(line, style)
  return self.send(2542, line, style)
end

-- Get the style number for the annotations for a line
function sci:annotation_get_style(line)
  return self.send(2543, line, 0)
end

-- Set the annotation styles for a line
function sci:annotation_set_styles(line, styles)
  return self.send(2544, line, styles)
end

-- Get the annotation styles for a line
function sci:annotation_get_styles(line)
  return self:send_with_stringresult(2545, line)
end

-- Get the number of annotation lines for a line
function sci:annotation_get_lines(line)
  return self.send(2546, line, 0)
end

-- Clear the annotations from all lines
function sci:annotation_clear_all()
  return self.send(2547, 0, 0)
end

-- Set the visibility for the annotations for a view
function sci:annotation_set_visible(visible)
  return self.send(2548, visible, 0)
end

-- Get the visibility for the annotations for a view
function sci:annotation_get_visible()
  return self.send(2549, 0, 0)
end

-- Get the start of the range of style numbers used for annotations
function sci:annotation_set_style_offset(style)
  return self.send(2550, style, 0)
end

-- Get the start of the range of style numbers used for annotations
function sci:annotation_get_style_offset()
  return self.send(2551, 0, 0)
end

-- Add a container action to the undo stack
function sci:add_undo_action(token, flags)
  return self.send(2560, token, flags)
end

-- Find the position of a character from a point within the window.
function sci:char_position_from_point(x, y)
  return self.send(2561, x, y)
end

-- Find the position of a character from a point within the window.
-- Return INVALID_POSITION if not close to text.
function sci:char_position_from_point_close(x, y)
  return self.send(2562, x, y)
end

-- Set whether multiple selections can be made
function sci:set_multiple_selection(multiple_selection)
  return self.send(2563, multiple_selection, 0)
end

-- Whether multiple selections can be made
function sci:get_multiple_selection()
  return self.send(2564, 0, 0)
end

-- Set whether typing can be performed into multiple selections
function sci:set_additional_selection_typing(additional_selection_typing)
  return self.send(2565, additional_selection_typing, 0)
end

-- Whether typing can be performed into multiple selections
function sci:get_additional_selection_typing()
  return self.send(2566, 0, 0)
end

-- Set whether additional carets will blink
function sci:set_additional_carets_blink(additional_carets_blink)
  return self.send(2567, additional_carets_blink, 0)
end

-- Whether additional carets will blink
function sci:get_additional_carets_blink()
  return self.send(2568, 0, 0)
end

-- Set whether additional carets are visible
function sci:set_additional_carets_visible(additional_carets_blink)
  return self.send(2608, additional_carets_blink, 0)
end

-- Whether additional carets are visible
function sci:get_additional_carets_visible()
  return self.send(2609, 0, 0)
end

-- How many selections are there?
function sci:get_selections()
  return self.send(2570, 0, 0)
end

-- Clear selections to a single empty stream selection
function sci:clear_selections()
  return self.send(2571, 0, 0)
end

-- Set a simple selection
function sci:set_selection(caret, anchor)
  return self.send(2572, caret, anchor)
end

-- Add a selection
function sci:add_selection(caret, anchor)
  return self.send(2573, caret, anchor)
end

-- Set the main selection
function sci:set_main_selection(selection)
  return self.send(2574, selection, 0)
end

-- Which selection is the main selection
function sci:get_main_selection()
  return self.send(2575, 0, 0)
end

function sci:set_selection_ncaret(selection, pos)
  return self.send(2576, selection, pos)
end

function sci:get_selection_ncaret(selection)
  return self.send(2577, selection, 0)
end

function sci:set_selection_nanchor(selection, pos_anchor)
  return self.send(2578, selection, pos_anchor)
end

function sci:get_selection_nanchor(selection)
  return self.send(2579, selection, 0)
end

function sci:set_selection_ncaret_virtual_space(selection, space)
  return self.send(2580, selection, space)
end

function sci:get_selection_ncaret_virtual_space(selection)
  return self.send(2581, selection, 0)
end

function sci:set_selection_nanchor_virtual_space(selection, space)
  return self.send(2582, selection, space)
end

function sci:get_selection_nanchor_virtual_space(selection)
  return self.send(2583, selection, 0)
end

-- Sets the position that starts the selection - this becomes the anchor.
function sci:set_selection_nstart(selection, pos)
  return self.send(2584, selection, pos)
end

-- Returns the position at the start of the selection.
function sci:get_selection_nstart(selection)
  return self.send(2585, selection, 0)
end

-- Sets the position that ends the selection - this becomes the currentPosition.
function sci:set_selection_nend(selection)
  return self.send(2586, selection, 0)
end

-- Returns the position at the end of the selection.
function sci:get_selection_nend(selection)
  return self.send(2587, selection, 0)
end

function sci:set_rectangular_selection_caret(pos)
  return self.send(2588, pos, 0)
end

function sci:get_rectangular_selection_caret()
  return self.send(2589, 0, 0)
end

function sci:set_rectangular_selection_anchor(pos_anchor)
  return self.send(2590, pos_anchor, 0)
end

function sci:get_rectangular_selection_anchor()
  return self.send(2591, 0, 0)
end

function sci:set_rectangular_selection_caret_virtual_space(space)
  return self.send(2592, space, 0)
end

function sci:get_rectangular_selection_caret_virtual_space()
  return self.send(2593, 0, 0)
end

function sci:set_rectangular_selection_anchor_virtual_space(space)
  return self.send(2594, space, 0)
end

function sci:get_rectangular_selection_anchor_virtual_space()
  return self.send(2595, 0, 0)
end

function sci:set_virtual_space_options(virtual_space_options)
  return self.send(2596, virtual_space_options, 0)
end

function sci:get_virtual_space_options()
  return self.send(2597, 0, 0)
end

function sci:set_rectangular_selection_modifier(modifier)
  return self.send(2598, modifier, 0)
end

-- Get the modifier key used for rectangular selection.
function sci:get_rectangular_selection_modifier()
  return self.send(2599, 0, 0)
end

-- Set the foreground colour of additional selections.
-- Must have previously called SetSelFore with non-zero first argument for this to have an effect.
function sci:set_additional_sel_fore(fore)
  return self.send(2600, fore, 0)
end

-- Set the background colour of additional selections.
-- Must have previously called SetSelBack with non-zero first argument for this to have an effect.
function sci:set_additional_sel_back(back)
  return self.send(2601, back, 0)
end

-- Set the alpha of the selection.
function sci:set_additional_sel_alpha(alpha)
  return self.send(2602, alpha, 0)
end

-- Get the alpha of the selection.
function sci:get_additional_sel_alpha()
  return self.send(2603, 0, 0)
end

-- Set the foreground colour of additional carets.
function sci:set_additional_caret_fore(fore)
  return self.send(2604, fore, 0)
end

-- Get the foreground colour of additional carets.
function sci:get_additional_caret_fore()
  return self.send(2605, 0, 0)
end

-- Set the main selection to the next selection.
function sci:rotate_selection()
  return self.send(2606, 0, 0)
end

-- Swap that caret and anchor of the main selection.
function sci:swap_main_anchor_caret()
  return self.send(2607, 0, 0)
end

-- Indicate that the internal state of a lexer has changed over a range and therefore
-- there may be a need to redraw.
function sci:change_lexer_state(start_pos, end_pos)
  return self.send(2617, start_pos, end_pos)
end

-- Find the next line at or after lineStart that is a contracted fold header line.
-- Return -1 when no more lines.
function sci:contracted_fold_next(line_start)
  return self.send(2618, line_start, 0)
end

-- Centre current line in window.
function sci:vertical_centre_caret()
  return self.send(2619, 0, 0)
end

-- Move the selected lines up one line, shifting the line above after the selection
function sci:move_selected_lines_up()
  return self.send(2620, 0, 0)
end

-- Move the selected lines down one line, shifting the line below before the selection
function sci:move_selected_lines_down()
  return self.send(2621, 0, 0)
end

-- Set the identifier reported as idFrom in notification messages.
function sci:set_identifier(identifier)
  return self.send(2622, identifier, 0)
end

-- Get the identifier.
function sci:get_identifier()
  return self.send(2623, 0, 0)
end

-- Set the width for future RGBA image data.
function sci:rgbaimage_set_width(width)
  return self.send(2624, width, 0)
end

-- Set the height for future RGBA image data.
function sci:rgbaimage_set_height(height)
  return self.send(2625, height, 0)
end

-- Define a marker from RGBA data.
-- It has the width and height from RGBAImageSetWidth/Height
function sci:marker_define_rgbaimage(marker_number, pixels)
  return self.send(2626, marker_number, pixels)
end

-- Register an RGBA image for use in autocompletion lists.
-- It has the width and height from RGBAImageSetWidth/Height
function sci:register_rgbaimage(type, pixels)
  return self.send(2627, type, pixels)
end

-- Scroll to start of document.
function sci:scroll_to_start()
  return self.send(2628, 0, 0)
end

-- Scroll to end of document.
function sci:scroll_to_end()
  return self.send(2629, 0, 0)
end

-- Set the technolgy used.
function sci:set_technology(technology)
  return self.send(2630, technology, 0)
end

-- Get the tech.
function sci:get_technology()
  return self.send(2631, 0, 0)
end

-- Create an ILoader*.
function sci:create_loader(bytes)
  return self.send(2632, bytes, 0)
end

-- Start notifying the container of all key presses and commands.
function sci:start_record()
  return self.send(3001, 0, 0)
end

-- Stop notifying the container of all key presses and commands.
function sci:stop_record()
  return self.send(3002, 0, 0)
end

-- Set the lexing language of the document.
function sci:set_lexer(lexer)
  return self.send(4001, lexer, 0)
end

-- Retrieve the lexing language of the document.
function sci:get_lexer()
  return self.send(4002, 0, 0)
end

-- Colourise a segment of the document using the current lexing language.
function sci:colourise(start_pos, end_pos)
  return self.send(4003, start_pos, end_pos)
end

-- Set up a value that may be used by a lexer for some optional feature.
function sci:set_property(key, value)
  return self.send(4004, key, value)
end

-- Set up the key words used by the lexer.
function sci:set_key_words(keyword_set, key_words)
  return self.send(4005, keyword_set, key_words)
end

-- Set the lexing language of the document based on string name.
function sci:set_lexer_language(language)
  return self.send(4006, 0, language)
end

-- Load a lexer library (dll / so).
function sci:load_lexer_library(path)
  return self.send(4007, 0, path)
end

-- Retrieve a "property" value previously set with SetProperty.
function sci:get_property(key)
  return self:send_with_stringresult(4008, key)
end

-- Retrieve a "property" value previously set with SetProperty,
-- with "$()" variable replacement on returned buffer.
function sci:get_property_expanded(key)
  return self:send_with_stringresult(4009, key)
end

-- Retrieve a "property" value previously set with SetProperty,
-- interpreted as an int AFTER any "$()" variable replacement.
function sci:get_property_int(key)
  return self.send(4010, key, 0)
end

-- Retrieve the number of bits the current lexer needs for styling.
function sci:get_style_bits_needed()
  return self.send(4011, 0, 0)
end

-- Retrieve the name of the lexer.
-- Return the length of the text.
function sci:get_lexer_language()
  return self:send_with_stringresult(4012)
end

-- For private communication between an application and a known lexer.
function sci:private_lexer_call(operation, pointer)
  return self.send(4013, operation, pointer)
end

-- Retrieve a '\n' separated list of properties understood by the current lexer.
function sci:property_names()
  return self:send_with_stringresult(4014)
end

-- Retrieve the type of a property.
function sci:property_type(name)
  return self.send(4015, name, 0)
end

-- Describe a property.
function sci:describe_property(name)
  return self:send_with_stringresult(4016, name)
end

-- Retrieve a '\n' separated list of descriptions of the keyword sets understood by the current lexer.
function sci:describe_key_word_sets()
  return self:send_with_stringresult(4017)
end

-- In palette mode?
function sci:get_use_palette()
  return self.send(2139, 0, 0)
end

-- In palette mode, Scintilla uses the environment's palette calls to display
-- more colours. This may lead to ugly displays.
function sci:set_use_palette(use_palette)
  return self.send(2039, use_palette, 0)
end

-- !! End auto generated content

return sci
