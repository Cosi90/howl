---
title: Spec - howl.ustrings
tags: spec
---
<div class="spec-group spec-group-1">

<h1 id="howl.ustrings">howl.ustrings</h1>

<h4 id=".ulen-holds-the-number-characters-in-the-string">.ulen holds the number characters in the string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">'foo'</span><span class="p">).</span><span class="n">ulen</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">'åäö'</span><span class="p">).</span><span class="n">ulen</span></code></pre>


<h4 id=".ulower-is-a-lower-cased-version-of-the-string">.ulower is a lower cased version of the string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'abcåäö'</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">'aBCåÄÖ'</span><span class="p">).</span><span class="n">ulower</span></code></pre>


<h4 id=".uupper-is-a-upper-cased-version-of-the-string">.uupper is a upper cased version of the string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'ABCÅÄÖ'</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">'abcåäö'</span><span class="p">).</span><span class="n">uupper</span></code></pre>


<h4 id=".ureverse-is-a-reversed-version-of-the-string">.ureverse is a reversed version of the string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'abcåäö'</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">'öäåcba'</span><span class="p">).</span><span class="n">ureverse</span></code></pre>


<h4 id=".multibyte-is-true-if-the-string-contains-multibyte-characters">.multibyte is true if the string contains multibyte characters</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="p">(</span><span class="s1">'foo'</span><span class="p">).</span><span class="n">multibyte</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="p">(</span><span class="s1">'åäö'</span><span class="p">).</span><span class="n">multibyte</span></code></pre>


<h4 id=".is_empty-is-true-for-the-empty-string">.is_empty is true for the empty string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="p">(</span><span class="s1">''</span><span class="p">).</span><span class="n">is_empty</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="p">(</span><span class="s1">' '</span><span class="p">).</span><span class="n">is_empty</span></code></pre>


<h4 id=".is_blank-is-true-for-a-string-that-is-empty-or-only-contains-whitespace">.is_blank is true for a string that is empty or only contains whitespace</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="p">(</span><span class="s1">'\t\r\n'</span><span class="p">).</span><span class="n">is_blank</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="p">(</span><span class="s1">'x'</span><span class="p">).</span><span class="n">is_blank</span></code></pre>


<h4 id=".stripped-contains-the-string-without-leading-or-trailing-whitespace">.stripped contains the string without leading or trailing whitespace</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'foo'</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">'  \tfoo'</span><span class="p">).</span><span class="n">stripped</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'foo'</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">'foo '</span><span class="p">).</span><span class="n">stripped</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'foo'</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">'  \tfoo '</span><span class="p">).</span><span class="n">stripped</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">''</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">'  \t'</span><span class="p">).</span><span class="n">stripped</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">''</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="s1">''</span><span class="p">).</span><span class="n">stripped</span></code></pre>


<h4 id=".is_valid_utf8-is-true-for-valid-utf8-strings-only">.is_valid_utf8 is true for valid utf8 strings only</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="p">(</span><span class="s1">'abc\194\128'</span><span class="p">).</span><span class="n">is_valid_utf8</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="p">(</span><span class="s1">'\127'</span><span class="p">).</span><span class="n">is_valid_utf8</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="p">(</span><span class="s1">'\128'</span><span class="p">).</span><span class="n">is_valid_utf8</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="p">(</span><span class="s1">'abc\194'</span><span class="p">).</span><span class="n">is_valid_utf8</span></code></pre>


<h4 id="ucompare(s1,-s2)-returns-negative,-0-or-positive-if-s1-is-smaller,-equal-or-greater-than-s2">ucompare(s1, s2) returns negative, 0 or positive if s1 is smaller, equal or greater than s2</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'a'</span><span class="o">\</span><span class="n">ucompare</span><span class="p">(</span><span class="s1">'b'</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'a'</span><span class="o">\</span><span class="n">ucompare</span><span class="p">(</span><span class="s1">'ä'</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s1">'a'</span><span class="o">\</span><span class="n">ucompare</span><span class="p">(</span><span class="s1">'a'</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'ö'</span><span class="o">\</span><span class="n">ucompare</span><span class="p">(</span><span class="s1">'ä'</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span></code></pre>


<h4 id="starts_with(s)-returns-true-if-the-string-starts-with-the-specified-string">starts_with(s) returns true if the string starts with the specified string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">starts_with</span><span class="w"> </span><span class="s1">'foo'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">starts_with</span><span class="w"> </span><span class="s1">'foobar'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">starts_with</span><span class="w"> </span><span class="s1">'foobarx'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">starts_with</span><span class="w"> </span><span class="s1">'.oo'</span></code></pre>


<h4 id="ends_with(s)-returns-true-if-the-string-ends-with-the-specified-string">ends_with(s) returns true if the string ends with the specified string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">ends_with</span><span class="w"> </span><span class="s1">'bar'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">ends_with</span><span class="w"> </span><span class="s1">'foobar'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">ends_with</span><span class="w"> </span><span class="s1">'barx'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">ends_with</span><span class="w"> </span><span class="s1">'.ar'</span></code></pre>


<h4 id="contains(s)-returns-true-if-the-string-contains-the-specified-string">contains(s) returns true if the string contains the specified string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">contains</span><span class="w"> </span><span class="s1">'foobar'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">contains</span><span class="w"> </span><span class="s1">'bar'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">contains</span><span class="w"> </span><span class="s1">'foo'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">contains</span><span class="w"> </span><span class="s1">'oba'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">contains</span><span class="w"> </span><span class="s1">'arx'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">contains</span><span class="w"> </span><span class="s1">'xfo'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">contains</span><span class="w"> </span><span class="s1">'.'</span></code></pre>

<div class="spec-group spec-group-2">

<h2 id=".is_likely_binary">.is_likely_binary</h2>

<h4 id="is-true-for-binary-strings">is true for binary strings</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_true</span><span class="w"> </span><span class="p">(</span><span class="s1">'\000\003xksj'</span><span class="p">).</span><span class="n">is_likely_binary</span></code></pre>


<h4 id="is-false-for-ordinary-ascii">is false for ordinary ASCII</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="p">(</span><span class="s1">'abcDEFGHZ!"#¤%&amp;//()"'</span><span class="p">).</span><span class="n">is_likely_binary</span></code></pre>


<h4 id="is-false-for-ordinary-utf-8">is false for ordinary UTF-8</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="p">(</span><span class="s1">'abc\194\128'</span><span class="p">).</span><span class="n">is_likely_binary</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">is_false</span><span class="w"> </span><span class="p">(</span><span class="s1">'åäöÅÄÖ'</span><span class="p">).</span><span class="n">is_likely_binary</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="usub(i,-[j])">usub(i, [j])</h2>

<pre class="highlight moonscript"><code><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'aåäöx'</span></code></pre>


<h4 id="operates-on-characters-instead-of-bytes">operates on characters instead of bytes</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'aåä'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">usub</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'aåä'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">usub</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span></code></pre>


<h4 id="adjusts-the-indexes-similarily-to-string.sub">adjusts the indexes similarily to string.sub</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'äöx'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">usub</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="c1">-- j defaults to -1</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'öx'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">usub</span><span class="w"> </span><span class="o">-</span><span class="mi">2</span><span class="w"> </span><span class="c1">-- i counts from back</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'aåäöx'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">usub</span><span class="w"> </span><span class="o">-</span><span class="mi">7</span><span class="w"> </span><span class="c1">-- is corrected to 1</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'aåäöx'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">usub</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">123</span><span class="w"> </span><span class="c1">-- j is corrected to last character</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">''</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">usub</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="c1">-- empty string when i &lt; j</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="character-access-using-indexing-notation">character access using indexing notation</h2>

<h4 id="single-character-strings-can-be-accessed-using-indexing-notation">single character strings can be accessed using indexing notation</h4>

<pre class="highlight moonscript"><code><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'aåäöx'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'a'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'ä'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span></code></pre>


<h4 id="accesses-using-invalid-indexes-returns-an-empty-string">accesses using invalid indexes returns an empty string</h4>

<pre class="highlight moonscript"><code><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'abc'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">''</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">''</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span></code></pre>


<h4 id="the-index-can-be-negative-similarily-to-sub()">the index can be negative similarily to sub()</h4>

<pre class="highlight moonscript"><code><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'aåäöx'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'ä'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="umatch(pattern-[,-init])">umatch(pattern [, init])</h2>

<h4 id="init-specifies-a-character-offset">init specifies a character offset</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'ö'</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">umatch</span><span class="w"> </span><span class="s1">'(%S+)()'</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="if-init-is-greater-than-the-length-nil-is-returned">if init is greater than the length nil is returned</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_nil</span><span class="w"> </span><span class="s1">'1'</span><span class="o">\</span><span class="n">umatch</span><span class="w"> </span><span class="s1">'1'</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span></code></pre>


<h4 id="accepts-regex-patterns">accepts regex patterns</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="s1">'ö'</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'/ö'</span><span class="o">\</span><span class="n">umatch</span><span class="w"> </span><span class="n">r</span><span class="s1">'\\p{L}'</span><span class="p">}</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="ugmatch(pattern)">ugmatch(pattern)</h2>

<h4 id="returns-character-offsets-instead-of-byte-offsets">returns character offsets instead of byte offsets</h4>

<pre class="highlight moonscript"><code><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'föo bãr'</span><span class="w">
</span><span class="n">gen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">ugmatch</span><span class="w"> </span><span class="s1">'(%S+)()'</span><span class="w">
</span><span class="n">rets</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{}</span><span class="w">
</span><span class="k">while</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="n">vals</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">gen</span><span class="o">!</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="k">break</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="o">#</span><span class="n">vals</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w">
  </span><span class="n">append</span><span class="w"> </span><span class="n">rets</span><span class="p">,</span><span class="w"> </span><span class="n">vals</span><span class="w">

</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'föo'</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'bãr'</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="n">rets</span></code></pre>


<h4 id="accepts-regex-patterns">accepts regex patterns</h4>

<pre class="highlight moonscript"><code><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'well hello there'</span><span class="w">
</span><span class="n">matches</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">m</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">ugmatch</span><span class="w"> </span><span class="n">r</span><span class="s1">'\\w+'</span><span class="p">]</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'well'</span><span class="p">,</span><span class="w"> </span><span class="s1">'hello'</span><span class="p">,</span><span class="w"> </span><span class="s1">'there'</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="n">matches</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="ufind(pattern-[,-init-[,-plain]])">ufind(pattern [, init [, plain]])</h2>

<h4 id="returns-character-offsets-instead-of-byte-offsets">returns character offsets instead of byte offsets</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'ä öx'</span><span class="o">\</span><span class="n">ufind</span><span class="w"> </span><span class="s1">'%s.+x()'</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="adjust-middle-of-sequence-position-returns-to-character-start">adjust middle-of-sequence position returns to character start</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöx'</span><span class="o">\</span><span class="n">ufind</span><span class="w"> </span><span class="s1">'%S'</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="init-specifies-a-character-offset">init specifies a character offset</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="s1">'ö'</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">ufind</span><span class="w"> </span><span class="s1">'(%S+)'</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="if-init-is-greater-than-the-length-nil-is-returned">if init is greater than the length nil is returned</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">is_nil</span><span class="w"> </span><span class="s1">'1'</span><span class="o">\</span><span class="n">ufind</span><span class="w"> </span><span class="s1">'1'</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span></code></pre>


<h4 id="accepts-regexes">accepts regexes</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'!ä öx'</span><span class="o">\</span><span class="n">ufind</span><span class="w"> </span><span class="n">r</span><span class="s1">'\\pL'</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="returns-empty-match-at-init-for-empty-string">returns empty match at init for empty string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'abc'</span><span class="o">\</span><span class="n">ufind</span><span class="w"> </span><span class="s1">''</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="converts-position-matches-correctly">converts position matches correctly</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'åäö'</span><span class="o">\</span><span class="n">ufind</span><span class="w"> </span><span class="s1">'()%S+()'</span><span class="w"> </span><span class="p">}</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="rfind(pattern-[,-init])">rfind(pattern [, init])</h2>

<h4 id="searches-backward-from-end-using-byte-offsets">searches backward from end using byte offsets</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöxx'</span><span class="o">\</span><span class="n">rfind</span><span class="w"> </span><span class="s1">'xx'</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="searches-backward-from-init,-when-provided">searches backward from init, when provided</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöxxx'</span><span class="o">\</span><span class="n">rfind</span><span class="w"> </span><span class="s1">'x'</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">}</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="urfind(text-[,-init])">urfind(text [, init])</h2>

<h4 id="searches-backwards-from-end-using-char-offsets">searches backwards from end using char offsets</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöxäöx'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">'äö'</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöxböx'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">'xböx'</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöxböx'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">'äöx'</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="returns-nothing-for-no-matches">returns nothing for no matches</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'hello'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">'x'</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="searches-backwards-from-init,-when-provided">searches backwards from init, when provided</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöxäöx'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">'äö'</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöxäöx'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">'äö'</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">3</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöxäöx'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">'äö'</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äöxäöx'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">'äö'</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">2</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="matches-text-entirely-before-init">matches text entirely before init</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'abcabc'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">'ab'</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="returns-empty-match-before-init-for-empty-string">returns empty match before init for empty string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'abc'</span><span class="o">\</span><span class="n">urfind</span><span class="w"> </span><span class="s1">''</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">}</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="count(s,-pattern-=-false)">count(s, pattern = false)</h2>

<h4 id="returns-the-number-of-occurences-of-s-within-the-string">returns the number of occurences of s within the string</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">count</span><span class="w"> </span><span class="s1">'foo'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">count</span><span class="w"> </span><span class="s1">'o'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">count</span><span class="w"> </span><span class="s1">'x'</span></code></pre>


<h4 id="s-is-evaluated-as-a-pattern-if-&lt;pattern&gt;-is-true">s is evaluated as a pattern if &lt;pattern&gt; is true</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="s1">'foo'</span><span class="o">\</span><span class="n">count</span><span class="p">(</span><span class="s1">'%w'</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">count</span><span class="p">(</span><span class="n">r</span><span class="s1">'[ab]'</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">)</span></code></pre>


<h4 id="s-is-evaluated-as-a-pattern-if-it-is-a-regex,-regardless-of-&lt;pattern&gt;">s is evaluated as a pattern if it is a regex, regardless of &lt;pattern&gt;</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="s1">'foobar'</span><span class="o">\</span><span class="n">count</span><span class="p">(</span><span class="n">r</span><span class="s1">'[ab]'</span><span class="p">)</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="byte_offset(...)">byte_offset(...)</h2>

<h4 id="returns-byte-offsets-for-all-character-offsets-passed-as-parameters">returns byte offsets for all character offsets passed as parameters</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">7</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">byte_offset</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="accepts-non-increasing-offsets">accepts non-increasing offsets</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'ab'</span><span class="o">\</span><span class="n">byte_offset</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="raises-an-error-for-decreasing-offsets">raises an error for decreasing offsets</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">raises</span><span class="w"> </span><span class="s1">'Decreasing offset'</span><span class="p">,</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">byte_offset</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span></code></pre>


<h4 id="raises-error-for-out-of-bounds-offsets">raises error for out-of-bounds offsets</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">raises</span><span class="w"> </span><span class="s1">'out of bounds'</span><span class="p">,</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">byte_offset</span><span class="w"> </span><span class="mi">5</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">raises</span><span class="w"> </span><span class="s1">'offset'</span><span class="p">,</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">byte_offset</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">raises</span><span class="w"> </span><span class="s1">'offset'</span><span class="p">,</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="o">\</span><span class="n">byte_offset</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span></code></pre>


<h4 id="when-parameters-is-a-table,-it-returns-a-table-for-all-offsets-within-that-table">when parameters is a table, it returns a table for all offsets within that table</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">},</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">byte_offset</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">}</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="char_offset(...)">char_offset(...)</h2>

<h4 id="returns-character-offsets-for-all-byte-offsets-passed-as-parameters">returns character offsets for all byte offsets passed as parameters</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">char_offset</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">7</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="accepts-non-increasing-offsets">accepts non-increasing offsets</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'ab'</span><span class="o">\</span><span class="n">char_offset</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="p">}</span></code></pre>


<h4 id="raises-an-error-for-decreasing-offsets">raises an error for decreasing offsets</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">raises</span><span class="w"> </span><span class="s1">'Decreasing offset'</span><span class="p">,</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">char_offset</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span></code></pre>


<h4 id="raises-error-for-out-of-bounds-offsets">raises error for out-of-bounds offsets</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">raises</span><span class="w"> </span><span class="s1">'out of bounds'</span><span class="p">,</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">'ab'</span><span class="o">\</span><span class="n">char_offset</span><span class="w"> </span><span class="mi">4</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">raises</span><span class="w"> </span><span class="s1">'offset'</span><span class="p">,</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">char_offset</span><span class="w"> </span><span class="mi">0</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">raises</span><span class="w"> </span><span class="s1">'offset'</span><span class="p">,</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s1">'a'</span><span class="o">\</span><span class="n">char_offset</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span></code></pre>


<h4 id="when-parameters-is-a-table,-it-returns-a-table-for-all-offsets-within-that-table">when parameters is a table, it returns a table for all offsets within that table</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">},</span><span class="w"> </span><span class="s1">'äåö'</span><span class="o">\</span><span class="n">char_offset</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">7</span><span class="w"> </span><span class="p">}</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="truncate(len,-opts-=-{})">truncate(len, opts = {})</h2>

<h4 id="truncates-long-strings-to-at-most-&lt;len&gt;-chars">truncates long strings to at most &lt;len&gt; chars</h4>

<pre class="highlight moonscript"><code><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'åäöñÅÄÖåäö'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'åäöñ..'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'åäöñ[..]'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_suffix:</span><span class="w"> </span><span class="s1">'[..]'</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'åäö&lt;Ə&gt;'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_suffix:</span><span class="w"> </span><span class="s1">'&lt;Ə&gt;'</span><span class="p">)</span><span class="w">

</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'..ÅÄÖåäö'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_prefix:</span><span class="w"> </span><span class="s1">'..'</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'[..]Öåäö'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_prefix:</span><span class="w"> </span><span class="s1">'[..]'</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'&lt;Ə&gt;ÄÖåäö'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_prefix:</span><span class="w"> </span><span class="s1">'&lt;Ə&gt;'</span><span class="p">)</span></code></pre>


<h4 id="does-not-truncate-unless-needed">does not truncate unless needed</h4>

<pre class="highlight moonscript"><code><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'åäöåäö'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'åäöåäö'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'åäöåäö'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'åäöåäö'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_prefix:</span><span class="w"> </span><span class="s1">'..'</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'åäöåäö'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_prefix:</span><span class="w"> </span><span class="s1">'..'</span><span class="p">)</span></code></pre>


<h4 id="skips-the-omission-if-the-result-would-go-beyond-&lt;len&gt;">skips the omission if the result would go beyond &lt;len&gt;</h4>

<pre class="highlight moonscript"><code><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'åäö'</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'åä'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_suffix:</span><span class="w"> </span><span class="s1">'[..]'</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'..'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_suffix:</span><span class="w"> </span><span class="s1">'..'</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'å'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_suffix:</span><span class="w"> </span><span class="s1">'..'</span><span class="p">)</span><span class="w">

</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'äö'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_prefix:</span><span class="w"> </span><span class="s1">'[..]'</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'..'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_prefix:</span><span class="w"> </span><span class="s1">'..'</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">equal</span><span class="w"> </span><span class="s1">'ö'</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">\</span><span class="n">truncate</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">omission_prefix:</span><span class="w"> </span><span class="s1">'..'</span><span class="p">)</span></code></pre>

</div>
<div class="spec-group spec-group-2">

<h2 id="split(pattern)">split(pattern)</h2>

<h4 id="splits-the-string-by-&lt;pattern&gt;">splits the string by &lt;pattern&gt;</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'1'</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">(</span><span class="s1">'1'</span><span class="p">)</span><span class="o">\</span><span class="n">split</span><span class="p">(</span><span class="s1">','</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'1'</span><span class="p">,</span><span class="w"> </span><span class="s1">'2'</span><span class="p">,</span><span class="w"> </span><span class="s1">'3'</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">(</span><span class="s1">'1,2,3'</span><span class="p">)</span><span class="o">\</span><span class="n">split</span><span class="p">(</span><span class="s1">','</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'1'</span><span class="p">,</span><span class="w"> </span><span class="s1">'2'</span><span class="p">,</span><span class="w"> </span><span class="s1">''</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">(</span><span class="s1">'1,2,'</span><span class="p">)</span><span class="o">\</span><span class="n">split</span><span class="p">(</span><span class="s1">','</span><span class="p">)</span><span class="w">
</span><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">''</span><span class="p">,</span><span class="w"> </span><span class="s1">''</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">(</span><span class="s1">','</span><span class="p">)</span><span class="o">\</span><span class="n">split</span><span class="p">(</span><span class="s1">','</span><span class="p">)</span></code></pre>


<h4 id="treats-&lt;pattern&gt;-as-a-lua-pattern">treats &lt;pattern&gt; as a lua pattern</h4>

<pre class="highlight moonscript"><code><span class="n">assert</span><span class="p">.</span><span class="n">same</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s1">'x'</span><span class="p">,</span><span class="w"> </span><span class="s1">'y'</span><span class="p">,</span><span class="w"> </span><span class="s1">'z'</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">(</span><span class="s1">'x.y,z'</span><span class="p">)</span><span class="o">\</span><span class="n">split</span><span class="p">(</span><span class="s1">'[.,]'</span><span class="p">)</span></code></pre>

</div>
</div>
