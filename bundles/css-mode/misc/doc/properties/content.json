{
  "name": "content",
  "description": "Dictates what is rendered inside the element or pseudo-element.",
  "keywords": [
    "css",
    "property",
    "content"
  ],
  "longDescription": "<p>It takes a comma separated list of URIs followed by a space separated list of tokens. If there are multiple URIs provided, then each is tried in turn until a value which is both available and supported is found. The last value is used as a fallback if the others fail.</p>\n\n\n",
  "syntax": [
    "content: [ <uri> ',' ]* [ normal | none | inhibit | <content-list> ];"
  ],
  "defaultValue": "normal",
  "values": {
    "normal": {
      "description": "<p>For an element, this computes to <code>contents</code>.</p>\n                        <p>For <code>::alternate</code>, if the superior parent uses the <code>footnote</code>, <code>endnote</code>, or <code>section-note</code> counter in its <code>content</code> property then the computed value of <code>content</code> is <code>contents</code>, otherwise it computes to <code>inhibit</code>.</p>\n                        <p>For <code>::before</code>, <code>::after</code>, and <code>::line-marker</code> this computes to <code>inhibit</code>.</p>\n                        <p>For <code>::marker</code>, if the superior parent's superior parent uses <code>footnote</code> in its <code>content</code> property then <code>normal</code> computes to the computed value of the <code>list-style-image</code> property if the list-style-image is not <code>none</code>, otherwise <code>counter(footnote, &lt;list-style-type&gt;)</code> \"suffix\" where &lt;list-style-type&gt; is the computed value of the <code>list-style-type</code> property if that property is not <code>none</code> and suffix is the suffix appropriate for that list style type, otherwise <code>inhibit</code>.</p>\n                        <p>For <code>::marker</code>, if the superior parent's superior parent uses <code>endnote</code> in its <code>content</code> property then <code>normal</code> computes to the computed value of the <code>list-style-image</code> property if the list-style-image is not <code>none</code>, otherwise <code>counter(endnote, &lt;list-style-type&gt;)</code> \"suffix\" where &lt;list-style-type&gt; is the computed value of the <code>list-style-type</code> property if that property is not <code>none</code> and suffix is the suffix appropriate for that list style type, otherwise <code>inhibit</code>.</p>\n                        <p>For <code>::marker</code>, if the superior parent's superior parent uses <code>section-note</code> in its <code>content</code> property then <code>normal</code> computes to the computed value of the <code>list-style-image</code> property if the list-style-image is not <code>none</code>, otherwise <code>counter(section-note, &lt;list-style-type&gt;)</code> \"suffix\" where &lt;list-style-type&gt; is the computed value of the <code>list-style-type</code> property if that property is not <code>none</code> and suffix is the suffix appropriate for that list style type, otherwise <code>inhibit</code>.</p>\n                        <p>Otherwise, for <code>::marker</code>, if the computed value of <code>display</code> for the superior parent is <code>list-item</code> then <code>normal</code> computes to the computed value of the <code>list-style-image</code> property if the list-style-image is not <code>none</code>, otherwise <code>counter(list-item, &lt;list-style-type&gt;)</code> \"suffix\" where &lt;list-style-type&gt; is the computed value of the <code>list-style-type</code> property if that property is not <code>none</code> and suffix is the suffix appropriate for that list style type, otherwise <code>inhibit</code>.</p>\n                        <p>For the <code>@footnote</code> area, it computes to <code>pending(footnote)</code>.</p>\n                        <p>For margin areas, it computes to <code>none</code>.</p>"
    },
    "<uri>": {
      "description": "<p>If the value is the only value in the list, as the two URIs in the example below are:</p>\n                        <p class=\"syntax\"><code>h1 { content: url(header/mng), url(header/png); }</code></p>\n                        <p>...then if the URI is available and the format is supported, then the element or pseudo-element becomes a replaced element, otherwise, the next item in the comma separated list is used, if any. In the example above, if <code>header/mng</code> wasn't in a supported format, then <code>header/png</code> would have been used instead. If no alternatives exist, then <code>none</code> is used as a final fallback, so in the example above, if <code>header/png</code> wasn't available either, then the <code>&lt;h1&gt;</code> element would be empty.</p>\n                        <p>Thus to make an element fallback on its contents, you have to explicitly give <code>contents</code> as a fallback:</p>\n                        <p class=\"syntax\"><code>content: url(1), url(2), url(3), contents;</code></p>\n                        <p>If the URI is not the only value in the list, as the second URI in the following example:</p>\n                        <p class=\"syntax\"><code>h1 { content: url(welcome), \"Welcome to: \" url(logo); }</code></p>\n                        <p>...then if the file is available and the format is supported, then an anonymous replaced inline element is inserted, otherwise the image is ignored (as if it hadn't been given at all).</p>\n                        <p>When a URI is used as replaced content, it affects the generation of <code>::before</code> and <code>::after</code> pseudo-elements</p>"
    },
    "none": {
      "description": "<p>On elements, this inhibits the children of the element from being rendered as children of this element, as if the element was empty.</p>\n                        <p>On pseudo-elements it causes the pseudo-element to have no content.</p>\n                        <p>In neither case does it prevent any pseudo-elements which have this element or pseudo-element as a superior from being generated.</p>"
    },
    "inhibit": {
      "description": "<p>On elements, this inhibits the children of the element from being rendered as children of this element, as if the element was empty.</p>\n                        <p>On pseudo-elements, this inhibits the creation of the pseudo-element, as if <code>display</code> computed to <code>none</code>.</p>\n                        <p>In both cases, this further inhibits the creation of any pseudo-elements which have this pseudo-element as a superior.</p>"
    },
    "<content-list>": {
      "description": "<p class=\"syntax\"><code>[ pending(&lt;identifier&gt;) | &lt;string&gt; | contents | footnote | endnote | section-note | list-item | &lt;counters&gt; | &lt;strings&gt; | open-quote | close-quote | no-open-quote | no-close-quote | &lt;glyph&gt; | &lt;uri&gt; | &lt;date&gt; | document-url | &lt;target&gt; ]+</code></p>\n                        <p>One or more of the following values, concatenated.</p>",
      "values": {
        "pending(<identifier>)": "<p>This causes all elements and pseudo-elements whose <code>move-to</code> property computes to the specified identifier to be inserted as children of the current element (or pseudo-element). Note: This doesn't change the DOM, and elements and pseudo-elements that have been moved inherit from their position in the DOM, not from their new position.</p>\n                                    <p>This must be the case, because otherwise it would be impossible to determine the value of <code>move-to</code>. Unfortunately, this can cause some unfortunate discontinuities, such as adjacent footnotes using different fonts because they were moved from elements with different fonts. It is therefore important that moved content be styled with the new location in mind.</p>\n                                    <p>Note that only elements and pseudo-element that have not yet been reinserted into content are moved. For example:</p>\n                                    <pre class=\"code\">moved { move-to: insert; }\ninsert { content: pending(insert); }</pre>\n                                    <pre class=\"code\">&lt;root&gt;\n    &lt;moved&gt; A &lt;/moved&gt;\n    1\n    &lt;insert/&gt;\n    2\n    &lt;moved&gt; B &lt;/moved&gt;\n    3\n    &lt;insert/&gt;\n&lt;/root&gt;</pre>\n                                    <p>...would result in <code>\"1 A 2 3 B\"</code>.</p>\n                                    <p>If used on an element or pseudo-element (particularly <code>::alternate</code>) which has a <code>move-to</code> property with a computed value other than <code>here</code>, the content pending at the pseudo-element's superior's position is inserted, not the content pending at the element or pseudo-element's insertion point. Similarly if used on a child of an element that has been moved: the <code>content</code> property is evaluated before the element is inserted in its new position. This should prevent an element ever being inserted into itself or other such existential conundrums.</p>\n                                    <p>Counters on content that is moved in this way are evaluated at the point of origin, not the insertion point.</p>\n                                    <p>The identifiers <code>here</code> and <code>normal</code> are valid, in that they do not cause a parse error and are not ignored, but they are useless as the <code>move-to</code> property cannot ever be set to an identifier with either of those values.</p>\n                                    <p>Need to define exactly how this interacts with <code>position:fixed</code>. Does <code>position:fixed</code> cause multiple rendering objects to be created, one per page? If so where does <code>move-to</code> on a <code>position:fixed</code> element move from?</p>",
        "\"\" (the empty string)": "<p>If the element or pseudo-element's <code>display</code> property computes to anything but <code>inline</code> then the element or pseude-element contains an empty anonymous inline box, otherwise the element contains an empty string.</p>\n                                    <p>(This is a formal way of saying that an empty string is different from <code>none</code> in that it forces the creation of a line box, even if the line box would be empty.)</p>",
        "<string>": "<p>The element or pseudo-element contains the specified string. Occurrences of line-feed or space characters in the string are handled according to the properties given in the Text module.</p>",
        "contents": "<p>The element's descendents. Since this can only be used once per element (you can't duplicate the children if, e.g., one is a plugin or form control)</p>\n                                    <p>Note that while it is useless to include <code>contents</code> twice in a single <code>content</code> property, that is not a parse error. The second occurrence simply has no effect, as it has already been used. It is also not a parse error to use it on a marker pseudo-element, it is only during the rendering stage that it gets treated like <code>none</code>.</p>",
        "footnote": "<p>Shorthand for <code>counter(footnote, normal)</code>. This is intended to be used on the in-flow part of a footnote.</p>",
        "endnote": "<p>Shorthand for <code>counter(endnote, normal)</code>. This is intended to be used on the in-flow part of a endnote.</p>",
        "section-note": "<p>Shorthand for <code>counter(section-note, normal)</code>. This is intended to be used on the in-flow part of a section-note.</p>",
        "list-item": "<p>Shorthand for <code>counter(list-item, normal)</code>. Note that this is not equivalent to <code>normal</code> when set on a <code>::marker</code> pseudo-element that has a superior with <code>display</code> set to <code>list-item</code>, as it ignores the <code>list-style</code> properties.</p>",
        "<counters>": "<p>Counters may be specified with two different functions: <code>counter()</code> or <code>counters()</code>. The former has two forms: <code>counter(name)</code> or <code>counter(name, style)</code>. The generated text is the value of the named counter at this point in the formatting structure; it is formatted in the indicated style (the default is specified using <code>@counter</code> rules). The latter function also has two forms: <code>counters(name, string)</code> or <code>counters(name, string, style)</code>. The generated text is the value of all counters with the given name at this point in the formatting structure, separated by the specified string. The counters are rendered in the indicated style (the default is again specified using <code>@counter</code> rules). See the section on automatic counters and numbering for more information.</p>",
        "<strings>": "<p>Set strings may be specified with the <code>string(name)</code> expression. The generated text is the value of the named string at this point in the formatting structure. See the section on named strings for more information.</p>",
        "open-quote": "<p>These values are replaced by the appropriate string from the <code>quotes</code> property.</p>",
        "close-quote": "<p>These values are replaced by the appropriate string from the <code>quotes</code> property.</p>",
        "no-open-quote": "<p>Inserts nothing (as in <code>none</code>), but increments (decrements) the level of nesting for quotes.</p>",
        "no-close-quote": "<p>Inserts nothing (as in <code>none</code>), but increments (decrements) the level of nesting for quotes.</p>",
        "<glyph>": "<p>Inserts the specified symbol.</p>",
        "<date>": "<p>The <code>date(format)</code> expression returns the current date and/or time, formatted according to the specified formatting string. Formatting strings will be defined in a future version of this draft and may be based on POSIX date formatting strings.</p>",
        "document-url": "<p>The URI of the current document. For local files, this may simply be the local file name.</p>",
        "<target>": "<p>Using the target expressions, authors can write cross-references.</p>"
      }
    }
  },
  "versions": {
    "doc2": "http://www.w3.org/TR/CSS2/generate.html#propdef-content",
    "doc21": "http://www.w3.org/TR/CSS21/generate.html#propdef-content",
    "doc3": "http://www.w3.org/TR/css3-content/#content"
  }
}